
board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005374  08005374  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800537c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  2000000c  08005388  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08005388  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e9b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7f  00000000  00000000  00032ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00036e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003004  00000000  00000000  00037e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fd2  00000000  00000000  0003ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097bbe  00000000  00000000  0004ee2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e69ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  000e6a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800530c 	.word	0x0800530c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800530c 	.word	0x0800530c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96e 	b.w	8000d08 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8083 	bne.w	8000b5a <__udivmoddi4+0x116>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d947      	bls.n	8000aea <__udivmoddi4+0xa6>
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	b142      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	f1c2 0020 	rsb	r0, r2, #32
 8000a64:	fa24 f000 	lsr.w	r0, r4, r0
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4097      	lsls	r7, r2
 8000a6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbbc f6f8 	udiv	r6, ip, r8
 8000a7c:	fa1f fe87 	uxth.w	lr, r7
 8000a80:	fb08 c116 	mls	r1, r8, r6, ip
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f10e 	mul.w	r1, r6, lr
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 8119 	bcs.w	8000ccc <__udivmoddi4+0x288>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8116 	bls.w	8000ccc <__udivmoddi4+0x288>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	443b      	add	r3, r7
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	45a6      	cmp	lr, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8105 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000ac6:	45a6      	cmp	lr, r4
 8000ac8:	f240 8102 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad4:	eba4 040e 	sub.w	r4, r4, lr
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	b902      	cbnz	r2, 8000aee <__udivmoddi4+0xaa>
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d150      	bne.n	8000b98 <__udivmoddi4+0x154>
 8000af6:	1bcb      	subs	r3, r1, r7
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	fa1f f887 	uxth.w	r8, r7
 8000b00:	2601      	movs	r6, #1
 8000b02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b06:	0c21      	lsrs	r1, r4, #16
 8000b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb08 f30c 	mul.w	r3, r8, ip
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0xe2>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	f200 80e9 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b26:	4684      	mov	ip, r0
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b38:	fb08 f800 	mul.w	r8, r8, r0
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x10c>
 8000b40:	193c      	adds	r4, r7, r4
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x10a>
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	f200 80d9 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 0408 	sub.w	r4, r4, r8
 8000b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b58:	e7bf      	b.n	8000ada <__udivmoddi4+0x96>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0x12e>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <__udivmoddi4+0x282>
 8000b64:	2600      	movs	r6, #0
 8000b66:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f683 	clz	r6, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d14a      	bne.n	8000c10 <__udivmoddi4+0x1cc>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0x140>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80b8 	bhi.w	8000cf4 <__udivmoddi4+0x2b0>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0103 	sbc.w	r1, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0a8      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b96:	e7a5      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ba0:	4097      	lsls	r7, r2
 8000ba2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000baa:	40d9      	lsrs	r1, r3
 8000bac:	4330      	orrs	r0, r6
 8000bae:	0c03      	lsrs	r3, r0, #16
 8000bb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f108 	mul.w	r1, r6, r8
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x19c>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bd2:	f080 808d 	bcs.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 808a 	bls.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b281      	uxth	r1, r0
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb00 f308 	mul.w	r3, r0, r8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x1c4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bfe:	d273      	bcs.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d971      	bls.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c04:	3802      	subs	r0, #2
 8000c06:	4439      	add	r1, r7
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0e:	e778      	b.n	8000b02 <__udivmoddi4+0xbe>
 8000c10:	f1c6 0c20 	rsb	ip, r6, #32
 8000c14:	fa03 f406 	lsl.w	r4, r3, r6
 8000c18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c22:	fa01 f306 	lsl.w	r3, r1, r6
 8000c26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c36:	fa1f f884 	uxth.w	r8, r4
 8000c3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c42:	fb09 fa08 	mul.w	sl, r9, r8
 8000c46:	458a      	cmp	sl, r1
 8000c48:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x220>
 8000c52:	1861      	adds	r1, r4, r1
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	d248      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000c5a:	458a      	cmp	sl, r1
 8000c5c:	d946      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4421      	add	r1, r4
 8000c64:	eba1 010a 	sub.w	r1, r1, sl
 8000c68:	b2bf      	uxth	r7, r7
 8000c6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c76:	fb00 f808 	mul.w	r8, r0, r8
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x24a>
 8000c7e:	19e7      	adds	r7, r4, r7
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d22e      	bcs.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d92c      	bls.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4427      	add	r7, r4
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	eba7 0708 	sub.w	r7, r7, r8
 8000c96:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9a:	454f      	cmp	r7, r9
 8000c9c:	46c6      	mov	lr, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	d31a      	bcc.n	8000cd8 <__udivmoddi4+0x294>
 8000ca2:	d017      	beq.n	8000cd4 <__udivmoddi4+0x290>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x27a>
 8000ca6:	ebb3 020e 	subs.w	r2, r3, lr
 8000caa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cb2:	40f2      	lsrs	r2, r6
 8000cb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb8:	40f7      	lsrs	r7, r6
 8000cba:	e9c5 2700 	strd	r2, r7, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e70b      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e9      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fd      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd4:	4543      	cmp	r3, r8
 8000cd6:	d2e5      	bcs.n	8000ca4 <__udivmoddi4+0x260>
 8000cd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7df      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e7d2      	b.n	8000c8e <__udivmoddi4+0x24a>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e78d      	b.n	8000c08 <__udivmoddi4+0x1c4>
 8000cec:	4681      	mov	r9, r0
 8000cee:	e7b9      	b.n	8000c64 <__udivmoddi4+0x220>
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	e775      	b.n	8000be0 <__udivmoddi4+0x19c>
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e74a      	b.n	8000b8e <__udivmoddi4+0x14a>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	4439      	add	r1, r7
 8000cfe:	e713      	b.n	8000b28 <__udivmoddi4+0xe4>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	e724      	b.n	8000b50 <__udivmoddi4+0x10c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <checkbatteries>:

static const uint8_t GYRO_ADDR = 0x68 << 1; //gyroscope address, 0x68 or 0x69 depending on the SA0 pin
static const uint8_t MAG_ADDR = 0x30 << 1; //magnetometer address


int checkbatteries(){
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
	BatteryLevels batterylevel;
	double actual_level, percentage;
//	actual_level = reading_EPS; //reading_EPS is still to be defined, will be acquireVoltage()?, acquirecurrent()?
//	percentage = (actual_level/MAX_BAT_LEVEL)*100;
//	batterylevel.fields.totalbattery = (int) percentage;
	return batterylevel.fields.totalbattery;
 8000d12:	783b      	ldrb	r3, [r7, #0]

}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <detumble>:

void detumble() {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <deployment>:

void deployment(bool deployment_state, I2C_HandleTypeDef *hi2c){
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	6039      	str	r1, [r7, #0]
 8000d38:	71fb      	strb	r3, [r7, #7]
	while(system_state(&hi2c) && !deployment_state){
 8000d3a:	bf00      	nop
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f87c 	bl	8000e3c <system_state>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d005      	beq.n	8000d56 <deployment+0x28>
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f2      	bne.n	8000d3c <deployment+0xe>
		/*Give high voltage to the resistor to burn the wire, TBD TIME AND VOLTAGE*/
	}
	deployment_state = true; /*Must be stored in FLASH memory in order to keep it if the system is rebooted*/
 8000d56:	2301      	movs	r3, #1
 8000d58:	71fb      	strb	r3, [r7, #7]
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <deploymentRF>:

void deploymentRF(){
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <check_position>:
		}
	}
}


bool check_position() {
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	//check the PQ position.
	//Region of contact with GS => comms_state = true
}
 8000d74:	bf00      	nop
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <init>:

/* Function that simulates the "INIT" state
 * Wait for a while until we start acting on the pocketqube once it is deployed
 */
void init(bool detumble_state, bool deployment_state, bool deploymentRF_state, I2C_HandleTypeDef *hi2c){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	71bb      	strb	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	717b      	strb	r3, [r7, #5]
	if(!system_state(&hi2c)) currentState = CONTINGENCY;
 8000d94:	463b      	mov	r3, r7
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f850 	bl	8000e3c <system_state>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f083 0301 	eor.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <init+0x30>
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <init+0x78>)
 8000daa:	2203      	movs	r2, #3
 8000dac:	701a      	strb	r2, [r3, #0]
		if(!deployment_state)	deployment(deployment_state, &hi2c);
		//Just in the PocketQube with the RF antenna
		if(!deploymentRF_state) deploymentRF();
		currentState = IDLE;
	}
}
 8000dae:	e01e      	b.n	8000dee <init+0x6e>
		if(!detumble_state) detumble();
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f083 0301 	eor.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <init+0x40>
 8000dbc:	f7ff ffb0 	bl	8000d20 <detumble>
		if(!deployment_state)	deployment(deployment_state, &hi2c);
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <init+0x58>
 8000dcc:	463a      	mov	r2, r7
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffab 	bl	8000d2e <deployment>
		if(!deploymentRF_state) deploymentRF();
 8000dd8:	797b      	ldrb	r3, [r7, #5]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <init+0x68>
 8000de4:	f7ff ffbd 	bl	8000d62 <deploymentRF>
		currentState = IDLE;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <init+0x78>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000003c 	.word	0x2000003c

08000dfc <initsensors>:

void initsensors(I2C_HandleTypeDef *hi2c) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	6078      	str	r0, [r7, #4]
	//todo mirar com inicialitzar sensors (magneto, giros, sensors temp...)
	HAL_StatusTypeDef ret;
	//GYROSCOPE CONFIGURATION
	ret = HAL_I2C_Master_Transmit(hi2c, GYRO_ADDR, (uint8_t*)0x1A, 1, 1000); //write in the register 0x1A
 8000e04:	23d0      	movs	r3, #208	; 0xd0
 8000e06:	b299      	uxth	r1, r3
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	221a      	movs	r2, #26
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f002 f98a 	bl	800312c <HAL_I2C_Master_Transmit>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {

	} else {
//		HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, /*data to register 0x1A*/, 1, 1000);
	}
	ret = HAL_I2C_Master_Transmit(hi2c, GYRO_ADDR, (uint8_t*)0x1B, 1, 1000); //write in the register 0x1B
 8000e1c:	23d0      	movs	r3, #208	; 0xd0
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	221b      	movs	r2, #27
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f002 f97e 	bl	800312c <HAL_I2C_Master_Transmit>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
	//MAGNETOMETER CONFIGURATION mirar a quin registre s'ha d'escriure
//	ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, /**/, 1, HAL_MAX_DELAY);
	//wait for ACK?


}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <system_state>:

bool system_state(I2C_HandleTypeDef *hi2c){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if(checkbatteries() < NOMINAL) return false;
 8000e44:	f7ff ff62 	bl	8000d0c <checkbatteries>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b59      	cmp	r3, #89	; 0x59
 8000e4c:	dc01      	bgt.n	8000e52 <system_state+0x16>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e00c      	b.n	8000e6c <system_state+0x30>

	//checkbatteries();
	if (!checktemperature(&hi2c)) return false;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f80d 	bl	8000e74 <checktemperature>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <system_state+0x2e>
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <system_state+0x30>
	//EPS_state(); ???
	//illumination_state(); ???
	return true;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <checktemperature>:

bool checktemperature(I2C_HandleTypeDef *hi2c){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	Temperatures temp;
//	acquireTemp(&hi2c, &temp);
	Flash_Read_Data(0x08008014, temp.raw, sizeof(temp));
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2208      	movs	r2, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	483a      	ldr	r0, [pc, #232]	; (8000f70 <checktemperature+0xfc>)
 8000e86:	f000 f95d 	bl	8001144 <Flash_Read_Data>
	int i, cont = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
	for (i=1; i<=7; i++){  //number of sensors not defined yet
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	dc66      	bgt.n	8000f66 <checktemperature+0xf2>
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	d84e      	bhi.n	8000f3e <checktemperature+0xca>
 8000ea0:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <checktemperature+0x34>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000ec5 	.word	0x08000ec5
 8000eac:	08000edf 	.word	0x08000edf
 8000eb0:	08000eef 	.word	0x08000eef
 8000eb4:	08000eff 	.word	0x08000eff
 8000eb8:	08000f0f 	.word	0x08000f0f
 8000ebc:	08000f1f 	.word	0x08000f1f
 8000ec0:	08000f2f 	.word	0x08000f2f

		switch(i) {

		case 1:
			if (temp.fields.tempbatt <= TEMP_MIN) heater(1);
 8000ec4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000ec8:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8000ecc:	da03      	bge.n	8000ed6 <checktemperature+0x62>
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 f850 	bl	8000f74 <heater>
			else heater(0);
		break;
 8000ed4:	e040      	b.n	8000f58 <checktemperature+0xe4>
			else heater(0);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f84c 	bl	8000f74 <heater>
		break;
 8000edc:	e03c      	b.n	8000f58 <checktemperature+0xe4>

		case 2:
			if (temp.fields.temp1 > TEMP_MAX) cont ++;
 8000ede:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000ee2:	2b69      	cmp	r3, #105	; 0x69
 8000ee4:	dd2d      	ble.n	8000f42 <checktemperature+0xce>
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
		break;
 8000eec:	e029      	b.n	8000f42 <checktemperature+0xce>

		case 3:
			if (temp.fields.temp2 > TEMP_MAX) cont ++;
 8000eee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000ef2:	2b69      	cmp	r3, #105	; 0x69
 8000ef4:	dd27      	ble.n	8000f46 <checktemperature+0xd2>
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
		break;
 8000efc:	e023      	b.n	8000f46 <checktemperature+0xd2>

		case 4:
			if (temp.fields.temp3 > TEMP_MAX) cont ++;
 8000efe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f02:	2b69      	cmp	r3, #105	; 0x69
 8000f04:	dd21      	ble.n	8000f4a <checktemperature+0xd6>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
		break;
 8000f0c:	e01d      	b.n	8000f4a <checktemperature+0xd6>

		case 5:
			if (temp.fields.temp4 > TEMP_MAX) cont ++;
 8000f0e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000f12:	2b69      	cmp	r3, #105	; 0x69
 8000f14:	dd1b      	ble.n	8000f4e <checktemperature+0xda>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
		break;
 8000f1c:	e017      	b.n	8000f4e <checktemperature+0xda>

		case 6:
			if (temp.fields.temp5 > TEMP_MAX) cont ++;
 8000f1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f22:	2b69      	cmp	r3, #105	; 0x69
 8000f24:	dd15      	ble.n	8000f52 <checktemperature+0xde>
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
		break;
 8000f2c:	e011      	b.n	8000f52 <checktemperature+0xde>

		case 7:
			if (temp.fields.temp6 > TEMP_MAX) cont ++;
 8000f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f32:	2b69      	cmp	r3, #105	; 0x69
 8000f34:	dd0f      	ble.n	8000f56 <checktemperature+0xe2>
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
		break;
 8000f3c:	e00b      	b.n	8000f56 <checktemperature+0xe2>

		default: break;
 8000f3e:	bf00      	nop
 8000f40:	e00a      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f42:	bf00      	nop
 8000f44:	e008      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f46:	bf00      	nop
 8000f48:	e006      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f4a:	bf00      	nop
 8000f4c:	e004      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f4e:	bf00      	nop
 8000f50:	e002      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f52:	bf00      	nop
 8000f54:	e000      	b.n	8000f58 <checktemperature+0xe4>
		break;
 8000f56:	bf00      	nop
		//more cases should come as much as the final number of sensors
		}

	if (cont > 3) return false;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	dd01      	ble.n	8000f62 <checktemperature+0xee>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e001      	b.n	8000f66 <checktemperature+0xf2>
	else return true;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e7ff      	b.n	8000f66 <checktemperature+0xf2>
	}
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08008014 	.word	0x08008014

08000f74 <heater>:

void heater(int state){
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <checkmemory>:

bool checkmemory(){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

}
 8000f8c:	bf00      	nop
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <GetSector+0xc8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d806      	bhi.n	8000fba <GetSector+0x22>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000fb2:	d302      	bcc.n	8000fba <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e04b      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <GetSector+0xcc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d806      	bhi.n	8000fd0 <GetSector+0x38>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <GetSector+0xd0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d302      	bcc.n	8000fd0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e040      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <GetSector+0xd4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d806      	bhi.n	8000fe6 <GetSector+0x4e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a25      	ldr	r2, [pc, #148]	; (8001070 <GetSector+0xd8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d302      	bcc.n	8000fe6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e035      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <GetSector+0xdc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d206      	bcs.n	8000ffc <GetSector+0x64>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <GetSector+0xe0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d302      	bcc.n	8000ffc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e02a      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <GetSector+0xe4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d206      	bcs.n	8001012 <GetSector+0x7a>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <GetSector+0xdc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d902      	bls.n	8001012 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800100c:	2304      	movs	r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e01f      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <GetSector+0xe8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d206      	bcs.n	8001028 <GetSector+0x90>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <GetSector+0xe4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d902      	bls.n	8001028 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001022:	2305      	movs	r3, #5
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e014      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <GetSector+0xec>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d206      	bcs.n	800103e <GetSector+0xa6>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <GetSector+0xe8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d902      	bls.n	800103e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001038:	2306      	movs	r3, #6
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e009      	b.n	8001052 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <GetSector+0xf0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d205      	bcs.n	8001052 <GetSector+0xba>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <GetSector+0xec>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d901      	bls.n	8001052 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800104e:	2307      	movs	r3, #7
 8001050:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	08003ffe 	.word	0x08003ffe
 8001064:	08007ffe 	.word	0x08007ffe
 8001068:	08004000 	.word	0x08004000
 800106c:	0800bffe 	.word	0x0800bffe
 8001070:	08008000 	.word	0x08008000
 8001074:	0800ffff 	.word	0x0800ffff
 8001078:	0800c000 	.word	0x0800c000
 800107c:	0801ffff 	.word	0x0801ffff
 8001080:	0803ffff 	.word	0x0803ffff
 8001084:	0805ffff 	.word	0x0805ffff
 8001088:	0807ffff 	.word	0x0807ffff

0800108c <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800109e:	f001 fa7b 	bl	8002598 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff ff78 	bl	8000f98 <GetSector>
 80010a8:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80010b6:	69f8      	ldr	r0, [r7, #28]
 80010b8:	f7ff ff6e 	bl	8000f98 <GetSector>
 80010bc:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <Flash_Write_Data+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <Flash_Write_Data+0xb4>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80010ca:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <Flash_Write_Data+0xb4>)
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a19      	ldr	r2, [pc, #100]	; (8001140 <Flash_Write_Data+0xb4>)
 80010da:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4817      	ldr	r0, [pc, #92]	; (8001140 <Flash_Write_Data+0xb4>)
 80010e4:	f001 fbd6 	bl	8002894 <HAL_FLASHEx_Erase>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01d      	beq.n	800112a <Flash_Write_Data+0x9e>
	  {
		  return HAL_FLASH_GetError ();
 80010ee:	f001 fa85 	bl	80025fc <HAL_FLASH_GetError>
 80010f2:	4603      	mov	r3, r0
 80010f4:	e020      	b.n	8001138 <Flash_Write_Data+0xac>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	68f9      	ldr	r1, [r7, #12]
 8001108:	2002      	movs	r0, #2
 800110a:	f001 f9f1 	bl	80024f0 <HAL_FLASH_Program>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <Flash_Write_Data+0x96>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3304      	adds	r3, #4
 8001118:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3301      	adds	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
 8001120:	e003      	b.n	800112a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001122:	f001 fa6b 	bl	80025fc <HAL_FLASH_GetError>
 8001126:	4603      	mov	r3, r0
 8001128:	e006      	b.n	8001138 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	dbe1      	blt.n	80010f6 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001132:	f001 fa53 	bl	80025dc <HAL_FLASH_Lock>

	   return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000028 	.word	0x20000028

08001144 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3304      	adds	r3, #4
 8001164:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	80fa      	strh	r2, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d000      	beq.n	8001172 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001170:	e7ef      	b.n	8001152 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001172:	bf00      	nop
	}
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	currentState = IDLE;
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <main+0x114>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f000 fdc2 	bl	8001d14 <HAL_Init>

  /* USER CODE BEGIN Init */

  /*Define the variables*/
  bool payload_state = true; //bool which indicates when do we need to go to PAYLOAD state
 8001190:	2301      	movs	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
  bool deploymentRF_state; //indicates if the deployment of the Payload antenna has been deployed
  bool detumble_state; //indicates if the detumbling process is completed
  bool comms_timer_state; //indicates if it is necessary to send telemetry

  //todo read different boolean states
    initsensors(&hi2c1);
 8001194:	4840      	ldr	r0, [pc, #256]	; (8001298 <main+0x118>)
 8001196:	f7ff fe31 	bl	8000dfc <initsensors>
    init(detumble_state, deployment_state, deploymentRF_state, &hi2c1);
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	7939      	ldrb	r1, [r7, #4]
 800119e:	7978      	ldrb	r0, [r7, #5]
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <main+0x118>)
 80011a2:	f7ff fded 	bl	8000d80 <init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f87b 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 f9e3 	bl	8001574 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011ae:	f000 f8df 	bl	8001370 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011b2:	f000 f92f 	bl	8001414 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011b6:	f000 f95b 	bl	8001470 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011ba:	f000 f98f 	bl	80014dc <MX_USART1_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 80011be:	f000 f9b7 	bl	8001530 <MX_USB_OTG_FS_HCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    system_state(&hi2c1);
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <main+0x118>)
 80011c4:	f7ff fe3a 	bl	8000e3c <system_state>
	    switch (currentState)
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <main+0x114>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d85e      	bhi.n	800128e <main+0x10e>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <main+0x58>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	08001231 	.word	0x08001231
 80011e0:	08001259 	.word	0x08001259
 80011e4:	08001287 	.word	0x08001287
	    {

	    case IDLE:
	        /* if a telecomand to use the payload/comms is received, go to PAYLOADS/COMMS state */
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <main+0x118>)
 80011ea:	f7ff fe27 	bl	8000e3c <system_state>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f083 0301 	eor.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <main+0x80>
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <main+0x114>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	701a      	strb	r2, [r3, #0]
	    	check_position();
 8001200:	f7ff fdb6 	bl	8000d70 <check_position>
	    	if(payload_state && checkmemory())	currentState = PAYLOAD; /*payload becomes true if a telecommand to acquire data is received*/
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <main+0x9c>
 800120a:	f7ff febd 	bl	8000f88 <checkmemory>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <main+0x9c>
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <main+0x114>)
 8001216:	2202      	movs	r2, #2
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e005      	b.n	8001228 <main+0xa8>
	        else if(comms_state)	currentState = COMMS;	/*comms becomes true when we have acquired the data and we need to send it*/
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <main+0xa8>
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <main+0x114>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	    	sensorReadings(&hi2c1); /*Updates the values of temperatures, voltages and currents*/
 8001228:	481b      	ldr	r0, [pc, #108]	; (8001298 <main+0x118>)
 800122a:	f000 fb4d 	bl	80018c8 <sensorReadings>
	    	/*ADCS tasks needed??*/
	    	//Add Rx mode here
	        break;
 800122e:	e02f      	b.n	8001290 <main+0x110>

	    /*Is needed to listen periodically with the receiver or timer from IDLE state? -> COMMS part*/
	    case COMMS:	// This might refer ONLY refer to TX!!!
	        /* check if the picture or spectrogram has to be sent and send it if needed */
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <main+0x118>)
 8001232:	f7ff fe03 	bl	8000e3c <system_state>
 8001236:	4603      	mov	r3, r0
 8001238:	f083 0301 	eor.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <main+0xc8>
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <main+0x114>)
 8001244:	2203      	movs	r2, #3
 8001246:	701a      	strb	r2, [r3, #0]
	    	else if(comms_state) /*telecommand()*/; 	        /* function that receives orders from "COMMS" */
	    	//else if(comms_timer_state) sendtelemetry(); /* loop that sends the telemetry data to "COMMS" */
	    	comms_state = false;
 8001248:	2300      	movs	r3, #0
 800124a:	71bb      	strb	r3, [r7, #6]
	    	comms_timer_state = false;
 800124c:	2300      	movs	r3, #0
 800124e:	70bb      	strb	r3, [r7, #2]
	    	currentState = IDLE;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <main+0x114>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	        break;
 8001256:	e01b      	b.n	8001290 <main+0x110>
	        //HAL_FLASH_Program(TypeProgram, Adress, Data); //todo: comprovar HAL

	    case PAYLOAD:
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <main+0x118>)
 800125a:	f7ff fdef 	bl	8000e3c <system_state>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <main+0xf0>
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <main+0x114>)
 800126c:	2203      	movs	r2, #3
 800126e:	701a      	strb	r2, [r3, #0]
	    	payloadinit();
 8001270:	f000 f9bb 	bl	80015ea <payloadinit>
	    	takePhoto(&huart1);
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <main+0x11c>)
 8001276:	f000 f9bf 	bl	80015f8 <takePhoto>
	    	payload_state = false;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
	    	currentState = IDLE;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <main+0x114>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	        break;
 8001284:	e004      	b.n	8001290 <main+0x110>
	         *Out of CONTINGENCY State when batterylevel is NOMINAL
	         *todo CHECK IF WE CAN EXECUTE SOME TASKS OR NOT IN STANDBY MODE*/
	    	 //while(checkbatteries() /= NOMINAL){
	    	 //}
	    	 /*Return to Run Mode*/
	         currentState = IDLE;
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <main+0x114>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
	         //Una opció és fer reset total del satelit quan surti de contingency
	        break;
 800128c:	e000      	b.n	8001290 <main+0x110>
	    /*If we reach this state something has gone wrong*/
	    default:
	    	/*REBOOT THE SYSTEM*/
	        break;
 800128e:	bf00      	nop
	    system_state(&hi2c1);
 8001290:	e797      	b.n	80011c2 <main+0x42>
 8001292:	bf00      	nop
 8001294:	2000003c 	.word	0x2000003c
 8001298:	20000040 	.word	0x20000040
 800129c:	200000dc 	.word	0x200000dc

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 f824 	bl	80052fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <SystemClock_Config+0xc8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <SystemClock_Config+0xcc>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001310:	2310      	movs	r3, #16
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001314:	23c0      	movs	r3, #192	; 0xc0
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fd53 	bl	8003dd0 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001330:	f000 f956 	bl	80015e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 ffb6 	bl	80042c0 <HAL_RCC_ClockConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800135a:	f000 f941 	bl	80015e0 <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	; 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_ADC1_Init+0x98>)
 8001384:	4a21      	ldr	r2, [pc, #132]	; (800140c <MX_ADC1_Init+0x9c>)
 8001386:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_ADC1_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_ADC1_Init+0x98>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_ADC1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_ADC1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_ADC1_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_ADC1_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_ADC1_Init+0x98>)
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <MX_ADC1_Init+0xa0>)
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_ADC1_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_ADC1_Init+0x98>)
 80013bc:	2201      	movs	r2, #1
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_ADC1_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_ADC1_Init+0x98>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_ADC1_Init+0x98>)
 80013d0:	f000 fd36 	bl	8001e40 <HAL_ADC_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 f901 	bl	80015e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_ADC1_Init+0x98>)
 80013f0:	f000 fd6a 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013fa:	f000 f8f1 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000094 	.word	0x20000094
 800140c:	40012000 	.word	0x40012000
 8001410:	0f000001 	.word	0x0f000001

08001414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f001 fd27 	bl	8002ea4 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 f8c0 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000040 	.word	0x20000040
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_SPI1_Init+0x64>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014bc:	220a      	movs	r2, #10
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014c2:	f003 f8cd 	bl	8004660 <HAL_SPI_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014cc:	f000 f888 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000120 	.word	0x20000120
 80014d8:	40013000 	.word	0x40013000

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART1_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART1_UART_Init+0x4c>)
 8001514:	f003 f92d 	bl	8004772 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 f85f 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000dc 	.word	0x200000dc
 800152c:	40011000 	.word	0x40011000

08001530 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800153a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800153e:	2208      	movs	r2, #8
 8001540:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001550:	2202      	movs	r2, #2
 8001552:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800155c:	f001 fc40 	bl	8002de0 <HAL_HCD_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001566:	f000 f83b 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000178 	.word	0x20000178

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_GPIO_Init+0x68>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_GPIO_Init+0x68>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_GPIO_Init+0x68>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_GPIO_Init+0x68>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <MX_GPIO_Init+0x68>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_GPIO_Init+0x68>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_GPIO_Init+0x68>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <MX_GPIO_Init+0x68>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_GPIO_Init+0x68>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>

080015ea <payloadinit>:

#include "payload.h"
#include "definitions.h"
//#include "main.c"

void payloadinit(){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
	system_state();
 80015ee:	f7ff fc25 	bl	8000e3c <system_state>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <takePhoto>:
void receive(UART_HandleTypeDef *huart){
	payloadinit();
	takePhoto(&huart); 	/*Store it in memory from definitions.Image.bufferImage*/
}

bool takePhoto(UART_HandleTypeDef *huart){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	3b0c      	subs	r3, #12
 8001608:	6018      	str	r0, [r3, #0]
 800160a:	466b      	mov	r3, sp
 800160c:	461d      	mov	r5, r3
	Image image; /*Declaration of an Union Image type*/
	uint8_t capture[5] = {0x56, 0x00, 0x36, 0x01, 0x00};
 800160e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001612:	3b3c      	subs	r3, #60	; 0x3c
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <takePhoto+0x128>)
 8001616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161a:	6018      	str	r0, [r3, #0]
 800161c:	3304      	adds	r3, #4
 800161e:	7019      	strb	r1, [r3, #0]
	uint8_t supposedAckCapture[5] = {0x76, 0x00, 0x36, 0x00, 0x00};
 8001620:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001624:	3b44      	subs	r3, #68	; 0x44
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <takePhoto+0x12c>)
 8001628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	7019      	strb	r1, [r3, #0]
	uint8_t ackCapture[5];
	uint8_t readImageDataLength[5] = {0x56, 0x00, 0x34, 0x01, 0x00};
 8001632:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001636:	3b54      	subs	r3, #84	; 0x54
 8001638:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <takePhoto+0x130>)
 800163a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	7019      	strb	r1, [r3, #0]
	/*supposed ack of readImageDataLength = 76 00 34 00 04 00 00 XX YY 	where XX YY -> image length
	 * XX -> high byte, YY -> low byte*/
	uint8_t ackReadImageDataLength[8];
	uint16_t dataLength; /*FALTA PASSAR A DECIMAL*/
	uint8_t readImageData[16] = {0x56, 0x00, 0x32, 0x0C, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
 8001644:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001648:	3b6c      	subs	r3, #108	; 0x6c
 800164a:	4a38      	ldr	r2, [pc, #224]	; (800172c <takePhoto+0x134>)
 800164c:	461c      	mov	r4, r3
 800164e:	4613      	mov	r3, r2
 8001650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                            0x00, 0x00, 0x00, 0x00, 0x00, 0x0A};
	uint8_t imageData[14 + dataLength +14];
 8001656:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 800165a:	f103 0306 	add.w	r3, r3, #6
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f103 041c 	add.w	r4, r3, #28
 8001664:	1e63      	subs	r3, r4, #1
 8001666:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800166a:	f102 0208 	add.w	r2, r2, #8
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4623      	mov	r3, r4
 8001672:	4618      	mov	r0, r3
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	00cb      	lsls	r3, r1, #3
 8001682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001686:	00c2      	lsls	r2, r0, #3
 8001688:	4623      	mov	r3, r4
 800168a:	4618      	mov	r0, r3
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	00cb      	lsls	r3, r1, #3
 800169a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800169e:	00c2      	lsls	r2, r0, #3
 80016a0:	4623      	mov	r3, r4
 80016a2:	3307      	adds	r3, #7
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	ebad 0d03 	sub.w	sp, sp, r3
 80016ac:	466b      	mov	r3, sp
 80016ae:	3300      	adds	r3, #0
 80016b0:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80016b4:	f102 020c 	add.w	r2, r2, #12
 80016b8:	6013      	str	r3, [r2, #0]
	uint8_t stopCapture[5] = {0x56, 0x00, 0x36, 0x01, 0x03};
 80016ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016be:	3b74      	subs	r3, #116	; 0x74
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <takePhoto+0x138>)
 80016c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c6:	6018      	str	r0, [r3, #0]
 80016c8:	3304      	adds	r3, #4
 80016ca:	7019      	strb	r1, [r3, #0]
	uint8_t supposedAckStopCapture[5] = {0x76, 0x00, 0x36, 0x00, 0x00};
 80016cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016d0:	3b7c      	subs	r3, #124	; 0x7c
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <takePhoto+0x12c>)
 80016d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d8:	6018      	str	r0, [r3, #0]
 80016da:	3304      	adds	r3, #4
 80016dc:	7019      	strb	r1, [r3, #0]
	uint8_t ackStopCapture[5];

//	HAL_UART_Transmit(&huart1, capture, 5, 1000); 		/*Transmit capture command*/
//	HAL_UART_Receive(&huart1, ackCapture, 5, 1000);		/*Receive ack capture*/
	HAL_UART_Transmit(huart, capture, 5, 1000); 		/*Transmit capture command*/
 80016de:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80016e2:	393c      	subs	r1, #60	; 0x3c
 80016e4:	f107 0010 	add.w	r0, r7, #16
 80016e8:	380c      	subs	r0, #12
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	2205      	movs	r2, #5
 80016f0:	6800      	ldr	r0, [r0, #0]
 80016f2:	f003 f88b 	bl	800480c <HAL_UART_Transmit>
	HAL_UART_Receive(huart, ackCapture, 5, 1000);		/*Receive ack capture*/
 80016f6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80016fa:	394c      	subs	r1, #76	; 0x4c
 80016fc:	f107 0010 	add.w	r0, r7, #16
 8001700:	380c      	subs	r0, #12
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	2205      	movs	r2, #5
 8001708:	6800      	ldr	r0, [r0, #0]
 800170a:	f003 f911 	bl	8004930 <HAL_UART_Receive>
 800170e:	46ad      	mov	sp, r5
//	HAL_FLASHEx_Erase(pEraseInit, SectorError); /*ACABAR DE MIRAR COM FUNCIONA*/
//	HAL_FLASH_Program_IT(TypeProgram, Address, Data);


	}
}
 8001710:	bf00      	nop
 8001712:	4618      	mov	r0, r3
 8001714:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	08005324 	.word	0x08005324
 8001724:	0800532c 	.word	0x0800532c
 8001728:	08005334 	.word	0x08005334
 800172c:	0800533c 	.word	0x0800533c
 8001730:	0800534c 	.word	0x0800534c

08001734 <acquireTemp>:
 */

#include "sensorReadings.h"
//#include "main.c"

void acquireTemp(I2C_HandleTypeDef *hi2c){
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af02      	add	r7, sp, #8
 800173a:	6078      	str	r0, [r7, #4]
	Temperatures temperatures_local;
	int i;
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val;
	uint8_t REG_TEMP = 0x00;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	float temp_c; //defineixo float però no sé si es pot guardar al tipus Temperatures.raw
	uint8_t ADDR[7] = {/*Adreça 1, Adreça 2, etc*/};//adreces deks diferents sensors de temperatura
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2100      	movs	r1, #0
 800174c:	460a      	mov	r2, r1
 800174e:	801a      	strh	r2, [r3, #0]
 8001750:	460a      	mov	r2, r1
 8001752:	709a      	strb	r2, [r3, #2]
	for(i=1; i<=8; i++){
 8001754:	2301      	movs	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	e091      	b.n	800187e <acquireTemp+0x14a>
		// Tell TMP102 that we want to read from the temperature register
		buf[0] = REG_TEMP;
 800175a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800175e:	743b      	strb	r3, [r7, #16]
		ret = HAL_I2C_Master_Transmit(&hi2c, ADDR[i], buf, 1, 1000);
 8001760:	f107 0208 	add.w	r2, r7, #8
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b299      	uxth	r1, r3
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	1d38      	adds	r0, r7, #4
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	f001 fcd7 	bl	800312c <HAL_I2C_Master_Transmit>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		if ( ret != HAL_OK ) {
 8001784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d175      	bne.n	8001878 <acquireTemp+0x144>
			//strcpy((char*)buf, "Error Tx\r\n");
		} else {
			  // Read 2 bytes from the temperature register
			  ret = HAL_I2C_Master_Receive(&hi2c, ADDR[i], buf, 2, 1000);
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b299      	uxth	r1, r3
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	1d38      	adds	r0, r7, #4
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2302      	movs	r3, #2
 80017a6:	f001 fdbf 	bl	8003328 <HAL_I2C_Master_Receive>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			  if ( ret != HAL_OK ) {
 80017b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d15f      	bne.n	8001878 <acquireTemp+0x144>
				  //strcpy((char*)buf, "Error Rx\r\n");
			  } else {
				  //Combine the bytes
				  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80017b8:	7c3b      	ldrb	r3, [r7, #16]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7c7b      	ldrb	r3, [r7, #17]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	857b      	strh	r3, [r7, #42]	; 0x2a

				  // Convert to 2's complement, since temperature can be negative
				  if ( val > 0x7FF ) {
 80017ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d2:	db05      	blt.n	80017e0 <acquireTemp+0xac>
					  val |= 0xF000;
 80017d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017d6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80017da:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80017de:	857b      	strh	r3, [r7, #42]	; 0x2a
				  }
				  // Convert to float temperature value (Celsius)
				  temp_c = val * 0.0625;
 80017e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe49 	bl	800047c <__aeabi_i2d>
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <acquireTemp+0x168>)
 80017f0:	f7fe feae 	bl	8000550 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f8ba 	bl	8000974 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	3b01      	subs	r3, #1
 8001808:	2b03      	cmp	r3, #3
 800180a:	d834      	bhi.n	8001876 <acquireTemp+0x142>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <acquireTemp+0xe0>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001825 	.word	0x08001825
 8001818:	08001839 	.word	0x08001839
 800181c:	0800184d 	.word	0x0800184d
 8001820:	08001861 	.word	0x08001861
				  switch(i) {
				  case 1:
					  temperatures_local.fields.temp1 = temp_c;
 8001824:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182c:	edc7 7a00 	vstr	s15, [r7]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	777b      	strb	r3, [r7, #29]
					  break;
 8001836:	e01f      	b.n	8001878 <acquireTemp+0x144>
				  case 2:
					  temperatures_local.fields.temp2 = temp_c;
 8001838:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800183c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001840:	edc7 7a00 	vstr	s15, [r7]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	77bb      	strb	r3, [r7, #30]
					  break;
 800184a:	e015      	b.n	8001878 <acquireTemp+0x144>
				  case 3:
					  temperatures_local.fields.temp3 = temp_c;
 800184c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001854:	edc7 7a00 	vstr	s15, [r7]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	77fb      	strb	r3, [r7, #31]
					  break;
 800185e:	e00b      	b.n	8001878 <acquireTemp+0x144>
				  case 4:
					  temperatures_local.fields.temp4 = temp_c;
 8001860:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001868:	edc7 7a00 	vstr	s15, [r7]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f887 3020 	strb.w	r3, [r7, #32]
					  break;
 8001874:	e000      	b.n	8001878 <acquireTemp+0x144>
				  default:
					  break;
 8001876:	bf00      	nop
	for(i=1; i<=8; i++){
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	3301      	adds	r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	2b08      	cmp	r3, #8
 8001882:	f77f af6a 	ble.w	800175a <acquireTemp+0x26>
				  }
			  }
		}
	}
	Flash_Write_Data(0x08008014, temperatures_local.raw, sizeof(temperatures_local));
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2208      	movs	r2, #8
 800188c:	4619      	mov	r1, r3
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <acquireTemp+0x16c>)
 8001890:	f7ff fbfc 	bl	800108c <Flash_Write_Data>
}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	; 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	3fb00000 	.word	0x3fb00000
 80018a0:	08008014 	.word	0x08008014

080018a4 <acquireVoltage>:

void acquireVoltage(){
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
	Voltages voltages;

}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <acquireCurrents>:

void acquireCurrents(){
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
	Currents currents;
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <sensorReadings>:

void sensorReadings(I2C_HandleTypeDef *hi2c){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	acquireTemp(&hi2c);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff2e 	bl	8001734 <acquireTemp>
	acquireVoltage();
 80018d8:	f7ff ffe4 	bl	80018a4 <acquireVoltage>
	acquireCurrents();
 80018dc:	f7ff ffeb 	bl	80018b6 <acquireCurrents>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_MspInit+0x4c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_ADC_MspInit+0x7c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d127      	bne.n	80019aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_ADC_MspInit+0x80>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001992:	237f      	movs	r3, #127	; 0x7f
 8001994:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_ADC_MspInit+0x84>)
 80019a6:	f001 f897 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40012000 	.word	0x40012000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_I2C_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12b      	bne.n	8001a3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a02:	2312      	movs	r3, #18
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <HAL_I2C_MspInit+0x8c>)
 8001a1a:	f001 f85d 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_SPI_MspInit+0xc0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d149      	bne.n	8001b06 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_SPI_MspInit+0xc4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <HAL_SPI_MspInit+0xc8>)
 8001ae2:	f000 fff9 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ae6:	2318      	movs	r3, #24
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af6:	2305      	movs	r3, #5
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <HAL_SPI_MspInit+0xcc>)
 8001b02:	f000 ffe9 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013000 	.word	0x40013000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_UART_MspInit+0x84>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12c      	bne.n	8001b9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_UART_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_UART_MspInit+0x8c>)
 8001b98:	f000 ff9e 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd0:	d132      	bne.n	8001c38 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c00:	230a      	movs	r3, #10
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <HAL_HCD_MspInit+0x94>)
 8001c0c:	f000 ff64 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_HCD_MspInit+0x90>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f890 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cdc:	4c0b      	ldr	r4, [pc, #44]	; (8001d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cea:	f7ff ffd7 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f003 fae1 	bl	80052b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fa45 	bl	8001180 <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d04:	0800537c 	.word	0x0800537c
  ldr r2, =_sbss
 8001d08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d0c:	200004a0 	.word	0x200004a0

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_Init+0x40>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_Init+0x40>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x40>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 fba3 	bl	8002488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff fdce 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fbad 	bl	80024d6 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 fb83 	bl	800249e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	2000047c 	.word	0x2000047c

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000047c 	.word	0x2000047c

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e033      	b.n	8001ebe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fd6a 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e86:	f023 0302 	bic.w	r3, r3, #2
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f94a 	bl	800212c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
 8001eae:	e001      	b.n	8001eb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e113      	b.n	800210c <HAL_ADC_ConfigChannel+0x244>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d925      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	409a      	lsls	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e022      	b.n	8001f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	2207      	movs	r2, #7
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd6:	e04c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	; 0x23
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	; 0x23
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	e023      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	; 0x41
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	; 0x41
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_ADC_ConfigChannel+0x250>)
 8002074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_ADC_ConfigChannel+0x254>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10f      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_ADC_ConfigChannel+0x254>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12b      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d122      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_ADC_ConfigChannel+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x260>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000
 8002120:	10000012 	.word	0x10000012
 8002124:	20000000 	.word	0x20000000
 8002128:	431bde83 	.word	0x431bde83

0800212c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002134:	4b79      	ldr	r3, [pc, #484]	; (800231c <ADC_Init+0x1f0>)
 8002136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <ADC_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e00f      	b.n	800222a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0202 	bic.w	r2, r2, #2
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	035a      	lsls	r2, r3, #13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051a      	lsls	r2, r3, #20
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	029a      	lsls	r2, r3, #10
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	0f000001 	.word	0x0f000001

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002454:	d301      	bcc.n	800245a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002456:	2301      	movs	r3, #1
 8002458:	e00f      	b.n	800247a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <SysTick_Config+0x40>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002462:	210f      	movs	r1, #15
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f7ff ff8e 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SysTick_Config+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x40>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ff47 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b0:	f7ff ff5c 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7ff ff8e 	bl	80023dc <NVIC_EncodePriority>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff5d 	bl	8002388 <__NVIC_SetPriority>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffb0 	bl	8002444 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_FLASH_Program+0xa0>)
 8002504:	7e1b      	ldrb	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_FLASH_Program+0x1e>
 800250a:	2302      	movs	r3, #2
 800250c:	e03b      	b.n	8002586 <HAL_FLASH_Program+0x96>
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_FLASH_Program+0xa0>)
 8002510:	2201      	movs	r2, #1
 8002512:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002518:	f000 f87c 	bl	8002614 <FLASH_WaitForLastOperation>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d12b      	bne.n	800257e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800252c:	783b      	ldrb	r3, [r7, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	68b8      	ldr	r0, [r7, #8]
 8002532:	f000 f927 	bl	8002784 <FLASH_Program_Byte>
 8002536:	e016      	b.n	8002566 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800253e:	883b      	ldrh	r3, [r7, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	68b8      	ldr	r0, [r7, #8]
 8002544:	f000 f8fa 	bl	800273c <FLASH_Program_HalfWord>
 8002548:	e00d      	b.n	8002566 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d105      	bne.n	800255c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	68b8      	ldr	r0, [r7, #8]
 8002556:	f000 f8cf 	bl	80026f8 <FLASH_Program_Word>
 800255a:	e004      	b.n	8002566 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800255c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f000 f897 	bl	8002694 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002566:	f24c 3050 	movw	r0, #50000	; 0xc350
 800256a:	f000 f853 	bl	8002614 <FLASH_WaitForLastOperation>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_FLASH_Program+0xa4>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_FLASH_Program+0xa4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_FLASH_Program+0xa0>)
 8002580:	2200      	movs	r2, #0
 8002582:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002584:	7dfb      	ldrb	r3, [r7, #23]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000480 	.word	0x20000480
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_FLASH_Unlock+0x38>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da0b      	bge.n	80025c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_FLASH_Unlock+0x38>)
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_FLASH_Unlock+0x3c>)
 80025ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_FLASH_Unlock+0x38>)
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_FLASH_Unlock+0x40>)
 80025b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_FLASH_Unlock+0x38>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da01      	bge.n	80025c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80025c2:	79fb      	ldrb	r3, [r7, #7]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	45670123 	.word	0x45670123
 80025d8:	cdef89ab 	.word	0xcdef89ab

080025dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_FLASH_Lock+0x1c>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_FLASH_Lock+0x1c>)
 80025e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_FLASH_GetError+0x14>)
 8002602:	69db      	ldr	r3, [r3, #28]
}  
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000480 	.word	0x20000480

08002614 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <FLASH_WaitForLastOperation+0x78>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002626:	f7ff fbdb 	bl	8001de0 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800262c:	e010      	b.n	8002650 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d00c      	beq.n	8002650 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <FLASH_WaitForLastOperation+0x38>
 800263c:	f7ff fbd0 	bl	8001de0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	d201      	bcs.n	8002650 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e019      	b.n	8002684 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <FLASH_WaitForLastOperation+0x7c>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e8      	bne.n	800262e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <FLASH_WaitForLastOperation+0x7c>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <FLASH_WaitForLastOperation+0x7c>)
 800266a:	2201      	movs	r2, #1
 800266c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <FLASH_WaitForLastOperation+0x7c>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800267a:	f000 f8a5 	bl	80027c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
  
}  
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000480 	.word	0x20000480
 8002690:	40023c00 	.word	0x40023c00

08002694 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <FLASH_Program_DoubleWord+0x60>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80026ca:	f3bf 8f6f 	isb	sy
}
 80026ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80026d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	000a      	movs	r2, r1
 80026de:	2300      	movs	r3, #0
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	3104      	adds	r1, #4
 80026e4:	4613      	mov	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <FLASH_Program_Word+0x40>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <FLASH_Program_Word+0x40>)
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <FLASH_Program_Word+0x40>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <FLASH_Program_Word+0x40>)
 8002714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002718:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <FLASH_Program_Word+0x40>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4a06      	ldr	r2, [pc, #24]	; (8002738 <FLASH_Program_Word+0x40>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40023c00 	.word	0x40023c00

0800273c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 800274e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002752:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <FLASH_Program_HalfWord+0x44>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	801a      	strh	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00

08002784 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <FLASH_Program_Byte+0x40>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <FLASH_Program_Byte+0x40>)
 8002796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <FLASH_Program_Byte+0x40>)
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <FLASH_Program_Byte+0x40>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <FLASH_Program_Byte+0x40>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <FLASH_Program_Byte+0x40>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	701a      	strb	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <FLASH_SetErrorCode+0xc4>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 80027e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <FLASH_SetErrorCode+0xc4>)
 80027e6:	2210      	movs	r2, #16
 80027e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <FLASH_SetErrorCode+0xc4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	4a24      	ldr	r2, [pc, #144]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 8002800:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002804:	2220      	movs	r2, #32
 8002806:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <FLASH_SetErrorCode+0xc4>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 800281e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 800283c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 800285a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <FLASH_SetErrorCode+0xc4>)
 800285e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002862:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <FLASH_SetErrorCode+0xc4>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <FLASH_SetErrorCode+0xc8>)
 800287a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <FLASH_SetErrorCode+0xc4>)
 800287e:	2202      	movs	r2, #2
 8002880:	60da      	str	r2, [r3, #12]
  }
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40023c00 	.word	0x40023c00
 8002890:	20000480 	.word	0x20000480

08002894 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_FLASHEx_Erase+0xd8>)
 80028a8:	7e1b      	ldrb	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_FLASHEx_Erase+0x1e>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e058      	b.n	8002964 <HAL_FLASHEx_Erase+0xd0>
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_FLASHEx_Erase+0xd8>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028bc:	f7ff feaa 	bl	8002614 <FLASH_WaitForLastOperation>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d148      	bne.n	800295c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d115      	bne.n	8002906 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 f844 	bl	8002974 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028f0:	f7ff fe90 	bl	8002614 <FLASH_WaitForLastOperation>
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_FLASHEx_Erase+0xdc>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_FLASHEx_Erase+0xdc>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6113      	str	r3, [r2, #16]
 8002904:	e028      	b.n	8002958 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	e01c      	b.n	8002948 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	68b8      	ldr	r0, [r7, #8]
 8002918:	f000 f850 	bl	80029bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800291c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002920:	f7ff fe78 	bl	8002614 <FLASH_WaitForLastOperation>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_FLASHEx_Erase+0xdc>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_FLASHEx_Erase+0xdc>)
 800292e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002932:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	601a      	str	r2, [r3, #0]
          break;
 8002940:	e00a      	b.n	8002958 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4413      	add	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3da      	bcc.n	800290e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002958:	f000 f878 	bl	8002a4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_FLASHEx_Erase+0xd8>)
 800295e:	2200      	movs	r2, #0
 8002960:	761a      	strb	r2, [r3, #24]

  return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000480 	.word	0x20000480
 8002970:	40023c00 	.word	0x40023c00

08002974 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <FLASH_MassErase+0x44>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <FLASH_MassErase+0x44>)
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <FLASH_MassErase+0x44>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <FLASH_MassErase+0x44>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <FLASH_MassErase+0x44>)
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	4313      	orrs	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <FLASH_MassErase+0x44>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6113      	str	r3, [r2, #16]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00

080029bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e010      	b.n	80029fa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d103      	bne.n	80029e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e009      	b.n	80029fa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d103      	bne.n	80029f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e002      	b.n	80029fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80029f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	490f      	ldr	r1, [pc, #60]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4313      	orrs	r3, r2
 8002a28:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <FLASH_Erase_Sector+0x8c>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6113      	str	r3, [r2, #16]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023c00 	.word	0x40023c00

08002a4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002a50:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d017      	beq.n	8002ac8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <FLASH_FlushCaches+0x88>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6013      	str	r3, [r2, #0]
  }
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e159      	b.n	8002da8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8148 	bne.w	8002da2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a2 	beq.w	8002da2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x202>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fe>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x1fa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x1f6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_GPIO_Init+0x300>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x1f2>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cec:	4935      	ldr	r1, [pc, #212]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d72:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	f67f aea2 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40020800 	.word	0x40020800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de2:	b08f      	sub	sp, #60	; 0x3c
 8002de4:	af0a      	add	r7, sp, #40	; 0x28
 8002de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e054      	b.n	8002e9c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fe fecf 	bl	8001bb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 f892 	bl	8004f5a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	687e      	ldr	r6, [r7, #4]
 8002e3e:	466d      	mov	r5, sp
 8002e40:	f106 0410 	add.w	r4, r6, #16
 8002e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e54:	1d33      	adds	r3, r6, #4
 8002e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f002 f81d 	bl	8004e98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 f889 	bl	8004f7c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	687e      	ldr	r6, [r7, #4]
 8002e72:	466d      	mov	r5, sp
 8002e74:	f106 0410 	add.w	r4, r6, #16
 8002e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e88:	1d33      	adds	r3, r6, #4
 8002e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f002 f91b 	bl	80050c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e12b      	b.n	800310e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fd78 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f08:	f001 fb82 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8002f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a81      	ldr	r2, [pc, #516]	; (8003118 <HAL_I2C_Init+0x274>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d807      	bhi.n	8002f28 <HAL_I2C_Init+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a80      	ldr	r2, [pc, #512]	; (800311c <HAL_I2C_Init+0x278>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e006      	b.n	8002f36 <HAL_I2C_Init+0x92>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a7d      	ldr	r2, [pc, #500]	; (8003120 <HAL_I2C_Init+0x27c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0e7      	b.n	800310e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a78      	ldr	r2, [pc, #480]	; (8003124 <HAL_I2C_Init+0x280>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <HAL_I2C_Init+0x274>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <HAL_I2C_Init+0xd4>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	e009      	b.n	8002f8c <HAL_I2C_Init+0xe8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a69      	ldr	r2, [pc, #420]	; (8003128 <HAL_I2C_Init+0x284>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	495c      	ldr	r1, [pc, #368]	; (8003118 <HAL_I2C_Init+0x274>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d819      	bhi.n	8002fe0 <HAL_I2C_Init+0x13c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e59      	subs	r1, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_I2C_Init+0x138>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e59      	subs	r1, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fda:	e051      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e04f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <HAL_I2C_Init+0x168>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e012      	b.n	8003032 <HAL_I2C_Init+0x18e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Init+0x196>
 8003036:	2301      	movs	r3, #1
 8003038:	e022      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10e      	bne.n	8003060 <HAL_I2C_Init+0x1bc>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e58      	subs	r0, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	440b      	add	r3, r1
 8003050:	fbb0 f3f3 	udiv	r3, r0, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	e00f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6911      	ldr	r1, [r2, #16]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	000186a0 	.word	0x000186a0
 800311c:	001e847f 	.word	0x001e847f
 8003120:	003d08ff 	.word	0x003d08ff
 8003124:	431bde83 	.word	0x431bde83
 8003128:	10624dd3 	.word	0x10624dd3

0800312c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	460b      	mov	r3, r1
 800313a:	817b      	strh	r3, [r7, #10]
 800313c:	4613      	mov	r3, r2
 800313e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe fe4e 	bl	8001de0 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 80e0 	bne.w	8003314 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	4970      	ldr	r1, [pc, #448]	; (8003320 <HAL_I2C_Master_Transmit+0x1f4>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fc58 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	e0d3      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Transmit+0x50>
 8003178:	2302      	movs	r3, #2
 800317a:	e0cc      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d007      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	; 0x21
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2210      	movs	r2, #16
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_I2C_Master_Transmit+0x1f8>)
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fac2 	bl	8003774 <I2C_MasterRequestWrite>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e08d      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003210:	e066      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fcd2 	bl	8003bc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fcc2 	bl	8003c42 <I2C_WaitOnBTFFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e01a      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d194      	bne.n	8003212 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000

08003328 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	461a      	mov	r2, r3
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
 8003338:	4613      	mov	r3, r2
 800333a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7fe fd50 	bl	8001de0 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	f040 820b 	bne.w	8003766 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	497c      	ldr	r1, [pc, #496]	; (800354c <HAL_I2C_Master_Receive+0x224>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb5a 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e1fe      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_Master_Receive+0x50>
 8003374:	2302      	movs	r3, #2
 8003376:	e1f7      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2222      	movs	r2, #34	; 0x22
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2210      	movs	r2, #16
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_I2C_Master_Receive+0x228>)
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e0:	8979      	ldrh	r1, [r7, #10]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa46 	bl	8003878 <I2C_MasterRequestRead>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1b8      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e18c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b01      	cmp	r3, #1
 800342c:	d11b      	bne.n	8003466 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e16c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11b      	bne.n	80034a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	e14c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034cc:	e138      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f200 80f1 	bhi.w	80036ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d123      	bne.n	8003528 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fbed 	bl	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e139      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003526:	e10b      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b02      	cmp	r3, #2
 800352e:	d14e      	bne.n	80035ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2200      	movs	r2, #0
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_I2C_Master_Receive+0x22c>)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fa6a 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e10e      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000
 8003554:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035cc:	e0b8      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	4966      	ldr	r1, [pc, #408]	; (8003770 <HAL_I2C_Master_Receive+0x448>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fa1b 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0bf      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	494f      	ldr	r1, [pc, #316]	; (8003770 <HAL_I2C_Master_Receive+0x448>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f9ed 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e091      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b8:	e042      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fb00 	bl	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e04c      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d118      	bne.n	8003740 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f aec2 	bne.w	80034ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	00010004 	.word	0x00010004

08003774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d006      	beq.n	800379e <I2C_MasterRequestWrite+0x2a>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d003      	beq.n	800379e <I2C_MasterRequestWrite+0x2a>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379c:	d108      	bne.n	80037b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e00b      	b.n	80037c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	2b12      	cmp	r3, #18
 80037b6:	d107      	bne.n	80037c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f91d 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d103      	bne.n	80037f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e035      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003804:	d108      	bne.n	8003818 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	e01b      	b.n	8003850 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	11db      	asrs	r3, r3, #7
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0306 	and.w	r3, r3, #6
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f063 030f 	orn	r3, r3, #15
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <I2C_MasterRequestWrite+0xfc>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f943 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e010      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <I2C_MasterRequestWrite+0x100>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f933 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010008 	.word	0x00010008
 8003874:	00010002 	.word	0x00010002

08003878 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d006      	beq.n	80038b2 <I2C_MasterRequestRead+0x3a>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d003      	beq.n	80038b2 <I2C_MasterRequestRead+0x3a>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038b0:	d108      	bne.n	80038c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e00b      	b.n	80038dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b11      	cmp	r3, #17
 80038ca:	d107      	bne.n	80038dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f893 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d103      	bne.n	800390c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e079      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003918:	d108      	bne.n	800392c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	e05f      	b.n	80039ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800392c:	897b      	ldrh	r3, [r7, #10]
 800392e:	11db      	asrs	r3, r3, #7
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0306 	and.w	r3, r3, #6
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f063 030f 	orn	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4930      	ldr	r1, [pc, #192]	; (8003a0c <I2C_MasterRequestRead+0x194>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f8b9 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e054      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4929      	ldr	r1, [pc, #164]	; (8003a10 <I2C_MasterRequestRead+0x198>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8a9 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e044      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f831 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e017      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	11db      	asrs	r3, r3, #7
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f063 030e 	orn	r3, r3, #14
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4907      	ldr	r1, [pc, #28]	; (8003a10 <I2C_MasterRequestRead+0x198>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f865 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00010008 	.word	0x00010008
 8003a10:	00010002 	.word	0x00010002

08003a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a24:	e025      	b.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d021      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fe f9d7 	bl	8001de0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e023      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10d      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	e00c      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d0b6      	beq.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad0:	e051      	b.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d123      	bne.n	8003b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e046      	b.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d021      	beq.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe f955 	bl	8001de0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e020      	b.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10c      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e00b      	b.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d18d      	bne.n	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bcc:	e02d      	b.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8ce 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e02d      	b.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d021      	beq.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fe f8fb 	bl	8001de0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d116      	bne.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e007      	b.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d1ca      	bne.n	8003bce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c4e:	e02d      	b.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f88d 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e02d      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d021      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7fe f8ba 	bl	8001de0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d1ca      	bne.n	8003c50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd0:	e042      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d119      	bne.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0210 	mvn.w	r2, #16
 8003ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e029      	b.n	8003d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fe f864 	bl	8001de0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d1b5      	bne.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d11b      	bne.n	8003dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e264      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4ba0      	ldr	r3, [pc, #640]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b99      	ldr	r3, [pc, #612]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e23f      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a90      	ldr	r2, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd ffaa 	bl	8001de0 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd ffa6 	bl	8001de0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e204      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd ff96 	bl	8001de0 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd ff92 	bl	8001de0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1f0      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c4      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd ff4b 	bl	8001de0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd ff47 	bl	8001de0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a5      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4940      	ldr	r1, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd ff2a 	bl	8001de0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd ff26 	bl	8001de0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e184      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd ff0a 	bl	8001de0 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd ff06 	bl	8001de0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e164      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e015      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fef3 	bl	8001de0 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fd feef 	bl	8001de0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e14d      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd feb5 	bl	8001de0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e011      	b.n	800409e <HAL_RCC_OscConfig+0x2ce>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
 8004088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fd fea8 	bl	8001de0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e106      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b85      	ldr	r3, [pc, #532]	; (80042b4 <HAL_RCC_OscConfig+0x4e4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 80040b2:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a80      	ldr	r2, [pc, #512]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x312>
 80040c8:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a77      	ldr	r2, [pc, #476]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040e2:	4b75      	ldr	r3, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a74      	ldr	r2, [pc, #464]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b72      	ldr	r3, [pc, #456]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a71      	ldr	r2, [pc, #452]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd fe6d 	bl	8001de0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fe69 	bl	8001de0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0c5      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x33a>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fd fe57 	bl	8001de0 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fe53 	bl	8001de0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0af      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b56      	ldr	r3, [pc, #344]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 809b 	beq.w	80042aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d05c      	beq.n	800423a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d141      	bne.n	800420c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b4c      	ldr	r3, [pc, #304]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd fe27 	bl	8001de0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd fe23 	bl	8001de0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e081      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fdfc 	bl	8001de0 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fdf8 	bl	8001de0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e056      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x41c>
 800420a:	e04e      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_OscConfig+0x4ec>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fd fde5 	bl	8001de0 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fd fde1 	bl	8001de0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e03f      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x44a>
 8004238:	e037      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e032      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d028      	beq.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d11a      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800427c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40007000 	.word	0x40007000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	42470060 	.word	0x42470060

080042c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0cc      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b68      	ldr	r3, [pc, #416]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d90c      	bls.n	80042fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d119      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d003      	beq.n	800437e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	2b03      	cmp	r3, #3
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e067      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4934      	ldr	r1, [pc, #208]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fd fd16 	bl	8001de0 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fd fd12 	bl	8001de0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e04f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d20c      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fc76 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	08005354 	.word	0x08005354
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b5b0      	push	{r4, r5, r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004492:	2100      	movs	r1, #0
 8004494:	6079      	str	r1, [r7, #4]
 8004496:	2100      	movs	r1, #0
 8004498:	60f9      	str	r1, [r7, #12]
 800449a:	2100      	movs	r1, #0
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800449e:	2100      	movs	r1, #0
 80044a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a2:	4952      	ldr	r1, [pc, #328]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044a4:	6889      	ldr	r1, [r1, #8]
 80044a6:	f001 010c 	and.w	r1, r1, #12
 80044aa:	2908      	cmp	r1, #8
 80044ac:	d00d      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x3e>
 80044ae:	2908      	cmp	r1, #8
 80044b0:	f200 8094 	bhi.w	80045dc <HAL_RCC_GetSysClockFreq+0x150>
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d002      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x32>
 80044b8:	2904      	cmp	r1, #4
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x38>
 80044bc:	e08e      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80044c0:	60bb      	str	r3, [r7, #8]
       break;
 80044c2:	e08e      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80044c6:	60bb      	str	r3, [r7, #8]
      break;
 80044c8:	e08b      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ca:	4948      	ldr	r1, [pc, #288]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044cc:	6849      	ldr	r1, [r1, #4]
 80044ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d4:	4945      	ldr	r1, [pc, #276]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044d6:	6849      	ldr	r1, [r1, #4]
 80044d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044dc:	2900      	cmp	r1, #0
 80044de:	d024      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e0:	4942      	ldr	r1, [pc, #264]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044e2:	6849      	ldr	r1, [r1, #4]
 80044e4:	0989      	lsrs	r1, r1, #6
 80044e6:	4608      	mov	r0, r1
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044f0:	f04f 0500 	mov.w	r5, #0
 80044f4:	ea00 0204 	and.w	r2, r0, r4
 80044f8:	ea01 0305 	and.w	r3, r1, r5
 80044fc:	493d      	ldr	r1, [pc, #244]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80044fe:	fb01 f003 	mul.w	r0, r1, r3
 8004502:	2100      	movs	r1, #0
 8004504:	fb01 f102 	mul.w	r1, r1, r2
 8004508:	1844      	adds	r4, r0, r1
 800450a:	493a      	ldr	r1, [pc, #232]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800450c:	fba2 0101 	umull	r0, r1, r2, r1
 8004510:	1863      	adds	r3, r4, r1
 8004512:	4619      	mov	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	f7fc fa7a 	bl	8000a14 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e04a      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	461a      	mov	r2, r3
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	ea02 0400 	and.w	r4, r2, r0
 8004542:	ea03 0501 	and.w	r5, r3, r1
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	014b      	lsls	r3, r1, #5
 8004554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004558:	0142      	lsls	r2, r0, #5
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	1b00      	subs	r0, r0, r4
 8004560:	eb61 0105 	sbc.w	r1, r1, r5
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	018b      	lsls	r3, r1, #6
 800456e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004572:	0182      	lsls	r2, r0, #6
 8004574:	1a12      	subs	r2, r2, r0
 8004576:	eb63 0301 	sbc.w	r3, r3, r1
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	00d9      	lsls	r1, r3, #3
 8004584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004588:	00d0      	lsls	r0, r2, #3
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	1912      	adds	r2, r2, r4
 8004590:	eb45 0303 	adc.w	r3, r5, r3
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	0299      	lsls	r1, r3, #10
 800459e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045a2:	0290      	lsls	r0, r2, #10
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f7fc fa2e 	bl	8000a14 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_RCC_GetSysClockFreq+0x160>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]
      break;
 80045da:	e002      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80045de:	60bb      	str	r3, [r7, #8]
      break;
 80045e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e2:	68bb      	ldr	r3, [r7, #8]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bdb0      	pop	{r4, r5, r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	017d7840 	.word	0x017d7840

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000000 	.word	0x20000000

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	08005364 	.word	0x08005364

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	08005364 	.word	0x08005364

08004660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07b      	b.n	800476a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004682:	d009      	beq.n	8004698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e005      	b.n	8004698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd f9cc 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0104 	and.w	r1, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0210 	and.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004758:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e03f      	b.n	8004804 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fd f9c1 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9a6 	bl	8004b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b20      	cmp	r3, #32
 800482a:	d17c      	bne.n	8004926 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_UART_Transmit+0x2c>
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e075      	b.n	8004928 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_UART_Transmit+0x3e>
 8004846:	2302      	movs	r3, #2
 8004848:	e06e      	b.n	8004928 <HAL_UART_Transmit+0x11c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2221      	movs	r2, #33	; 0x21
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004860:	f7fd fabe 	bl	8001de0 <HAL_GetTick>
 8004864:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487a:	d108      	bne.n	800488e <HAL_UART_Transmit+0x82>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e003      	b.n	8004896 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800489e:	e02a      	b.n	80048f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8e2 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e036      	b.n	8004928 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	3302      	adds	r3, #2
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e007      	b.n	80048e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1cf      	bne.n	80048a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	2140      	movs	r1, #64	; 0x40
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f8b2 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e006      	b.n	8004928 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	f040 808c 	bne.w	8004a6a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_Receive+0x2e>
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e084      	b.n	8004a6c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_UART_Receive+0x40>
 800496c:	2302      	movs	r3, #2
 800496e:	e07d      	b.n	8004a6c <HAL_UART_Receive+0x13c>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2222      	movs	r2, #34	; 0x22
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498c:	f7fd fa28 	bl	8001de0 <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d108      	bne.n	80049ba <HAL_UART_Receive+0x8a>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e003      	b.n	80049c2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049ca:	e043      	b.n	8004a54 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	2120      	movs	r1, #32
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f84c 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e042      	b.n	8004a6c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10c      	bne.n	8004a06 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3302      	adds	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e01f      	b.n	8004a46 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d007      	beq.n	8004a20 <HAL_UART_Receive+0xf0>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_UART_Receive+0xfe>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e008      	b.n	8004a40 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3301      	adds	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1b6      	bne.n	80049cc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a84:	e02c      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d028      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a94:	f7fd f9a4 	bl	8001de0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d21d      	bcs.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e00f      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d0c3      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b09f      	sub	sp, #124	; 0x7c
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	68d9      	ldr	r1, [r3, #12]
 8004b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	ea40 0301 	orr.w	r3, r0, r1
 8004b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b4c:	f021 010c 	bic.w	r1, r1, #12
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b56:	430b      	orrs	r3, r1
 8004b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	6999      	ldr	r1, [r3, #24]
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	ea40 0301 	orr.w	r3, r0, r1
 8004b70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4bc5      	ldr	r3, [pc, #788]	; (8004e8c <UART_SetConfig+0x384>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d004      	beq.n	8004b86 <UART_SetConfig+0x7e>
 8004b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4bc3      	ldr	r3, [pc, #780]	; (8004e90 <UART_SetConfig+0x388>)
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d103      	bne.n	8004b8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b86:	f7ff fd57 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8004b8a:	6778      	str	r0, [r7, #116]	; 0x74
 8004b8c:	e002      	b.n	8004b94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7ff fd3f 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8004b92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9c:	f040 80b6 	bne.w	8004d0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	f04f 0500 	mov.w	r5, #0
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	6439      	str	r1, [r7, #64]	; 0x40
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bb8:	1912      	adds	r2, r2, r4
 8004bba:	eb45 0303 	adc.w	r3, r5, r3
 8004bbe:	f04f 0000 	mov.w	r0, #0
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	00d9      	lsls	r1, r3, #3
 8004bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bcc:	00d0      	lsls	r0, r2, #3
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	1911      	adds	r1, r2, r4
 8004bd4:	6639      	str	r1, [r7, #96]	; 0x60
 8004bd6:	416b      	adcs	r3, r5
 8004bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004bf4:	f7fb ff0e 	bl	8000a14 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4ba5      	ldr	r3, [pc, #660]	; (8004e94 <UART_SetConfig+0x38c>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	011e      	lsls	r6, r3, #4
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	461c      	mov	r4, r3
 8004c0a:	f04f 0500 	mov.w	r5, #0
 8004c0e:	4622      	mov	r2, r4
 8004c10:	462b      	mov	r3, r5
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	6339      	str	r1, [r7, #48]	; 0x30
 8004c16:	415b      	adcs	r3, r3
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c1e:	1912      	adds	r2, r2, r4
 8004c20:	eb45 0303 	adc.w	r3, r5, r3
 8004c24:	f04f 0000 	mov.w	r0, #0
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	00d9      	lsls	r1, r3, #3
 8004c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c32:	00d0      	lsls	r0, r2, #3
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	1911      	adds	r1, r2, r4
 8004c3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c3c:	416b      	adcs	r3, r5
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c5a:	f7fb fedb 	bl	8000a14 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b8c      	ldr	r3, [pc, #560]	; (8004e94 <UART_SetConfig+0x38c>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a87      	ldr	r2, [pc, #540]	; (8004e94 <UART_SetConfig+0x38c>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c84:	441e      	add	r6, r3
 8004c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	1894      	adds	r4, r2, r2
 8004c94:	623c      	str	r4, [r7, #32]
 8004c96:	415b      	adcs	r3, r3
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9e:	1812      	adds	r2, r2, r0
 8004ca0:	eb41 0303 	adc.w	r3, r1, r3
 8004ca4:	f04f 0400 	mov.w	r4, #0
 8004ca8:	f04f 0500 	mov.w	r5, #0
 8004cac:	00dd      	lsls	r5, r3, #3
 8004cae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cb2:	00d4      	lsls	r4, r2, #3
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	1814      	adds	r4, r2, r0
 8004cba:	653c      	str	r4, [r7, #80]	; 0x50
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	1891      	adds	r1, r2, r2
 8004ccc:	61b9      	str	r1, [r7, #24]
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cda:	f7fb fe9b 	bl	8000a14 <__aeabi_uldivmod>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <UART_SetConfig+0x38c>)
 8004ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	2164      	movs	r1, #100	; 0x64
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3332      	adds	r3, #50	; 0x32
 8004cf6:	4a67      	ldr	r2, [pc, #412]	; (8004e94 <UART_SetConfig+0x38c>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	f003 0207 	and.w	r2, r3, #7
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4432      	add	r2, r6
 8004d08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d0a:	e0b9      	b.n	8004e80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0e:	461c      	mov	r4, r3
 8004d10:	f04f 0500 	mov.w	r5, #0
 8004d14:	4622      	mov	r2, r4
 8004d16:	462b      	mov	r3, r5
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	6139      	str	r1, [r7, #16]
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d24:	1912      	adds	r2, r2, r4
 8004d26:	eb45 0303 	adc.w	r3, r5, r3
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	00d9      	lsls	r1, r3, #3
 8004d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d38:	00d0      	lsls	r0, r2, #3
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	eb12 0804 	adds.w	r8, r2, r4
 8004d42:	eb43 0905 	adc.w	r9, r3, r5
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f04f 0100 	mov.w	r1, #0
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	008b      	lsls	r3, r1, #2
 8004d5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d5e:	0082      	lsls	r2, r0, #2
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb fe56 	bl	8000a14 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <UART_SetConfig+0x38c>)
 8004d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	011e      	lsls	r6, r3, #4
 8004d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	1894      	adds	r4, r2, r2
 8004d84:	60bc      	str	r4, [r7, #8]
 8004d86:	415b      	adcs	r3, r3
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d8e:	1812      	adds	r2, r2, r0
 8004d90:	eb41 0303 	adc.w	r3, r1, r3
 8004d94:	f04f 0400 	mov.w	r4, #0
 8004d98:	f04f 0500 	mov.w	r5, #0
 8004d9c:	00dd      	lsls	r5, r3, #3
 8004d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004da2:	00d4      	lsls	r4, r2, #3
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	1814      	adds	r4, r2, r0
 8004daa:	64bc      	str	r4, [r7, #72]	; 0x48
 8004dac:	414b      	adcs	r3, r1
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	008b      	lsls	r3, r1, #2
 8004dc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc8:	0082      	lsls	r2, r0, #2
 8004dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dce:	f7fb fe21 	bl	8000a14 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <UART_SetConfig+0x38c>)
 8004dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	2164      	movs	r1, #100	; 0x64
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	3332      	adds	r3, #50	; 0x32
 8004dea:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <UART_SetConfig+0x38c>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df6:	441e      	add	r6, r3
 8004df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f04f 0100 	mov.w	r1, #0
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	1894      	adds	r4, r2, r2
 8004e06:	603c      	str	r4, [r7, #0]
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e10:	1812      	adds	r2, r2, r0
 8004e12:	eb41 0303 	adc.w	r3, r1, r3
 8004e16:	f04f 0400 	mov.w	r4, #0
 8004e1a:	f04f 0500 	mov.w	r5, #0
 8004e1e:	00dd      	lsls	r5, r3, #3
 8004e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e24:	00d4      	lsls	r4, r2, #3
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	eb12 0a00 	adds.w	sl, r2, r0
 8004e2e:	eb43 0b01 	adc.w	fp, r3, r1
 8004e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	008b      	lsls	r3, r1, #2
 8004e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e4a:	0082      	lsls	r2, r0, #2
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb fde0 	bl	8000a14 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <UART_SetConfig+0x38c>)
 8004e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2164      	movs	r1, #100	; 0x64
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	3332      	adds	r3, #50	; 0x32
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <UART_SetConfig+0x38c>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	f003 020f 	and.w	r2, r3, #15
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4432      	add	r2, r6
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	377c      	adds	r7, #124	; 0x7c
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40011000 	.word	0x40011000
 8004e90:	40011400 	.word	0x40011400
 8004e94:	51eb851f 	.word	0x51eb851f

08004e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 001c 	add.w	r0, r7, #28
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d122      	bne.n	8004ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8b8 	bl	8005060 <USB_CoreReset>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e01a      	b.n	8004f2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8ac 	bl	8005060 <USB_CoreReset>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f1e:	e005      	b.n	8004f2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10b      	bne.n	8004f4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f043 0206 	orr.w	r2, r3, #6
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f56:	b004      	add	sp, #16
 8004f58:	4770      	bx	lr

08004f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d106      	bne.n	8004fa8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	e00b      	b.n	8004fc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e001      	b.n	8004fc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e003      	b.n	8004fc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fc0:	2032      	movs	r0, #50	; 0x32
 8004fc2:	f7fc ff19 	bl	8001df8 <HAL_Delay>

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <USB_FlushTxFifo+0x48>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d0f0      	beq.n	8004fea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	00030d40 	.word	0x00030d40

0800501c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2210      	movs	r2, #16
 800502c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <USB_FlushRxFifo+0x40>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d0f0      	beq.n	800502e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <USB_CoreReset+0x64>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e01b      	b.n	80050b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	daf2      	bge.n	800506c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <USB_CoreReset+0x64>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e006      	b.n	80050b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d0f0      	beq.n	8005096 <USB_CoreReset+0x36>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	00030d40 	.word	0x00030d40

080050c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c8:	b084      	sub	sp, #16
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	f107 001c 	add.w	r0, r7, #28
 80050d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10a      	bne.n	8005136 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512e:	f043 0304 	orr.w	r3, r3, #4
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e014      	b.n	8005160 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e009      	b.n	8005160 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800515a:	f023 0304 	bic.w	r3, r3, #4
 800515e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005160:	2110      	movs	r1, #16
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff ff34 	bl	8004fd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ff57 	bl	800501c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e015      	b.n	80051a0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3e5      	bcc.n	8005174 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80051a8:	2101      	movs	r1, #1
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f848 	bl	8005240 <USB_DriveVbus>

  HAL_Delay(200U);
 80051b0:	20c8      	movs	r0, #200	; 0xc8
 80051b2:	f7fc fe21 	bl	8001df8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a14      	ldr	r2, [pc, #80]	; (800522c <USB_HostInit+0x164>)
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <USB_HostInit+0x168>)
 80051e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051e6:	e009      	b.n	80051fc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2280      	movs	r2, #128	; 0x80
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a10      	ldr	r2, [pc, #64]	; (8005234 <USB_HostInit+0x16c>)
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <USB_HostInit+0x170>)
 80051f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f043 0210 	orr.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <USB_HostInit+0x174>)
 8005214:	4313      	orrs	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005226:	b004      	add	sp, #16
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	01000200 	.word	0x01000200
 8005230:	00e00300 	.word	0x00e00300
 8005234:	00600080 	.word	0x00600080
 8005238:	004000e0 	.word	0x004000e0
 800523c:	a3200008 	.word	0xa3200008

08005240 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005264:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <USB_DriveVbus+0x44>
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d106      	bne.n	8005284 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800527e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005282:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	d109      	bne.n	80052a4 <USB_DriveVbus+0x64>
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800529e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <__libc_init_array>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	4d0d      	ldr	r5, [pc, #52]	; (80052ec <__libc_init_array+0x38>)
 80052b8:	4c0d      	ldr	r4, [pc, #52]	; (80052f0 <__libc_init_array+0x3c>)
 80052ba:	1b64      	subs	r4, r4, r5
 80052bc:	10a4      	asrs	r4, r4, #2
 80052be:	2600      	movs	r6, #0
 80052c0:	42a6      	cmp	r6, r4
 80052c2:	d109      	bne.n	80052d8 <__libc_init_array+0x24>
 80052c4:	4d0b      	ldr	r5, [pc, #44]	; (80052f4 <__libc_init_array+0x40>)
 80052c6:	4c0c      	ldr	r4, [pc, #48]	; (80052f8 <__libc_init_array+0x44>)
 80052c8:	f000 f820 	bl	800530c <_init>
 80052cc:	1b64      	subs	r4, r4, r5
 80052ce:	10a4      	asrs	r4, r4, #2
 80052d0:	2600      	movs	r6, #0
 80052d2:	42a6      	cmp	r6, r4
 80052d4:	d105      	bne.n	80052e2 <__libc_init_array+0x2e>
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052dc:	4798      	blx	r3
 80052de:	3601      	adds	r6, #1
 80052e0:	e7ee      	b.n	80052c0 <__libc_init_array+0xc>
 80052e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e6:	4798      	blx	r3
 80052e8:	3601      	adds	r6, #1
 80052ea:	e7f2      	b.n	80052d2 <__libc_init_array+0x1e>
 80052ec:	08005374 	.word	0x08005374
 80052f0:	08005374 	.word	0x08005374
 80052f4:	08005374 	.word	0x08005374
 80052f8:	08005378 	.word	0x08005378

080052fc <memset>:
 80052fc:	4402      	add	r2, r0
 80052fe:	4603      	mov	r3, r0
 8005300:	4293      	cmp	r3, r2
 8005302:	d100      	bne.n	8005306 <memset+0xa>
 8005304:	4770      	bx	lr
 8005306:	f803 1b01 	strb.w	r1, [r3], #1
 800530a:	e7f9      	b.n	8005300 <memset+0x4>

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
