
board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d4  080051d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051dc  080051dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  2000000c  080051f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  080051f0  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001304f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8f  00000000  00000000  0003308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00036020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a13  00000000  00000000  000381a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146af  00000000  00000000  00050bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a9d  00000000  00000000  00065262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fccff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  000fcd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005174 	.word	0x08005174

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005174 	.word	0x08005174

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b96e 	b.w	8000b38 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468c      	mov	ip, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8083 	bne.w	800098a <__udivmoddi4+0x116>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d947      	bls.n	800091a <__udivmoddi4+0xa6>
 800088a:	fab2 f282 	clz	r2, r2
 800088e:	b142      	cbz	r2, 80008a2 <__udivmoddi4+0x2e>
 8000890:	f1c2 0020 	rsb	r0, r2, #32
 8000894:	fa24 f000 	lsr.w	r0, r4, r0
 8000898:	4091      	lsls	r1, r2
 800089a:	4097      	lsls	r7, r2
 800089c:	ea40 0c01 	orr.w	ip, r0, r1
 80008a0:	4094      	lsls	r4, r2
 80008a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008a6:	0c23      	lsrs	r3, r4, #16
 80008a8:	fbbc f6f8 	udiv	r6, ip, r8
 80008ac:	fa1f fe87 	uxth.w	lr, r7
 80008b0:	fb08 c116 	mls	r1, r8, r6, ip
 80008b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b8:	fb06 f10e 	mul.w	r1, r6, lr
 80008bc:	4299      	cmp	r1, r3
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x60>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008c6:	f080 8119 	bcs.w	8000afc <__udivmoddi4+0x288>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 8116 	bls.w	8000afc <__udivmoddi4+0x288>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008dc:	fb08 3310 	mls	r3, r8, r0, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d909      	bls.n	8000900 <__udivmoddi4+0x8c>
 80008ec:	193c      	adds	r4, r7, r4
 80008ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f2:	f080 8105 	bcs.w	8000b00 <__udivmoddi4+0x28c>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f240 8102 	bls.w	8000b00 <__udivmoddi4+0x28c>
 80008fc:	3802      	subs	r0, #2
 80008fe:	443c      	add	r4, r7
 8000900:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000904:	eba4 040e 	sub.w	r4, r4, lr
 8000908:	2600      	movs	r6, #0
 800090a:	b11d      	cbz	r5, 8000914 <__udivmoddi4+0xa0>
 800090c:	40d4      	lsrs	r4, r2
 800090e:	2300      	movs	r3, #0
 8000910:	e9c5 4300 	strd	r4, r3, [r5]
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	b902      	cbnz	r2, 800091e <__udivmoddi4+0xaa>
 800091c:	deff      	udf	#255	; 0xff
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	2a00      	cmp	r2, #0
 8000924:	d150      	bne.n	80009c8 <__udivmoddi4+0x154>
 8000926:	1bcb      	subs	r3, r1, r7
 8000928:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092c:	fa1f f887 	uxth.w	r8, r7
 8000930:	2601      	movs	r6, #1
 8000932:	fbb3 fcfe 	udiv	ip, r3, lr
 8000936:	0c21      	lsrs	r1, r4, #16
 8000938:	fb0e 331c 	mls	r3, lr, ip, r3
 800093c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000940:	fb08 f30c 	mul.w	r3, r8, ip
 8000944:	428b      	cmp	r3, r1
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0xe4>
 8000948:	1879      	adds	r1, r7, r1
 800094a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0xe2>
 8000950:	428b      	cmp	r3, r1
 8000952:	f200 80e9 	bhi.w	8000b28 <__udivmoddi4+0x2b4>
 8000956:	4684      	mov	ip, r0
 8000958:	1ac9      	subs	r1, r1, r3
 800095a:	b2a3      	uxth	r3, r4
 800095c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000960:	fb0e 1110 	mls	r1, lr, r0, r1
 8000964:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000968:	fb08 f800 	mul.w	r8, r8, r0
 800096c:	45a0      	cmp	r8, r4
 800096e:	d907      	bls.n	8000980 <__udivmoddi4+0x10c>
 8000970:	193c      	adds	r4, r7, r4
 8000972:	f100 33ff 	add.w	r3, r0, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x10a>
 8000978:	45a0      	cmp	r8, r4
 800097a:	f200 80d9 	bhi.w	8000b30 <__udivmoddi4+0x2bc>
 800097e:	4618      	mov	r0, r3
 8000980:	eba4 0408 	sub.w	r4, r4, r8
 8000984:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000988:	e7bf      	b.n	800090a <__udivmoddi4+0x96>
 800098a:	428b      	cmp	r3, r1
 800098c:	d909      	bls.n	80009a2 <__udivmoddi4+0x12e>
 800098e:	2d00      	cmp	r5, #0
 8000990:	f000 80b1 	beq.w	8000af6 <__udivmoddi4+0x282>
 8000994:	2600      	movs	r6, #0
 8000996:	e9c5 0100 	strd	r0, r1, [r5]
 800099a:	4630      	mov	r0, r6
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	fab3 f683 	clz	r6, r3
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d14a      	bne.n	8000a40 <__udivmoddi4+0x1cc>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d302      	bcc.n	80009b4 <__udivmoddi4+0x140>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f200 80b8 	bhi.w	8000b24 <__udivmoddi4+0x2b0>
 80009b4:	1a84      	subs	r4, r0, r2
 80009b6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ba:	2001      	movs	r0, #1
 80009bc:	468c      	mov	ip, r1
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0a8      	beq.n	8000914 <__udivmoddi4+0xa0>
 80009c2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009c6:	e7a5      	b.n	8000914 <__udivmoddi4+0xa0>
 80009c8:	f1c2 0320 	rsb	r3, r2, #32
 80009cc:	fa20 f603 	lsr.w	r6, r0, r3
 80009d0:	4097      	lsls	r7, r2
 80009d2:	fa01 f002 	lsl.w	r0, r1, r2
 80009d6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009da:	40d9      	lsrs	r1, r3
 80009dc:	4330      	orrs	r0, r6
 80009de:	0c03      	lsrs	r3, r0, #16
 80009e0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009e4:	fa1f f887 	uxth.w	r8, r7
 80009e8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009f0:	fb06 f108 	mul.w	r1, r6, r8
 80009f4:	4299      	cmp	r1, r3
 80009f6:	fa04 f402 	lsl.w	r4, r4, r2
 80009fa:	d909      	bls.n	8000a10 <__udivmoddi4+0x19c>
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a02:	f080 808d 	bcs.w	8000b20 <__udivmoddi4+0x2ac>
 8000a06:	4299      	cmp	r1, r3
 8000a08:	f240 808a 	bls.w	8000b20 <__udivmoddi4+0x2ac>
 8000a0c:	3e02      	subs	r6, #2
 8000a0e:	443b      	add	r3, r7
 8000a10:	1a5b      	subs	r3, r3, r1
 8000a12:	b281      	uxth	r1, r0
 8000a14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a20:	fb00 f308 	mul.w	r3, r0, r8
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d907      	bls.n	8000a38 <__udivmoddi4+0x1c4>
 8000a28:	1879      	adds	r1, r7, r1
 8000a2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a2e:	d273      	bcs.n	8000b18 <__udivmoddi4+0x2a4>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d971      	bls.n	8000b18 <__udivmoddi4+0x2a4>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4439      	add	r1, r7
 8000a38:	1acb      	subs	r3, r1, r3
 8000a3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a3e:	e778      	b.n	8000932 <__udivmoddi4+0xbe>
 8000a40:	f1c6 0c20 	rsb	ip, r6, #32
 8000a44:	fa03 f406 	lsl.w	r4, r3, r6
 8000a48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a4c:	431c      	orrs	r4, r3
 8000a4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a52:	fa01 f306 	lsl.w	r3, r1, r6
 8000a56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a5e:	431f      	orrs	r7, r3
 8000a60:	0c3b      	lsrs	r3, r7, #16
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fa1f f884 	uxth.w	r8, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a72:	fb09 fa08 	mul.w	sl, r9, r8
 8000a76:	458a      	cmp	sl, r1
 8000a78:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x220>
 8000a82:	1861      	adds	r1, r4, r1
 8000a84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a88:	d248      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000a8a:	458a      	cmp	sl, r1
 8000a8c:	d946      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000a8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a92:	4421      	add	r1, r4
 8000a94:	eba1 010a 	sub.w	r1, r1, sl
 8000a98:	b2bf      	uxth	r7, r7
 8000a9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aa6:	fb00 f808 	mul.w	r8, r0, r8
 8000aaa:	45b8      	cmp	r8, r7
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x24a>
 8000aae:	19e7      	adds	r7, r4, r7
 8000ab0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ab4:	d22e      	bcs.n	8000b14 <__udivmoddi4+0x2a0>
 8000ab6:	45b8      	cmp	r8, r7
 8000ab8:	d92c      	bls.n	8000b14 <__udivmoddi4+0x2a0>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4427      	add	r7, r4
 8000abe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ac2:	eba7 0708 	sub.w	r7, r7, r8
 8000ac6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aca:	454f      	cmp	r7, r9
 8000acc:	46c6      	mov	lr, r8
 8000ace:	4649      	mov	r1, r9
 8000ad0:	d31a      	bcc.n	8000b08 <__udivmoddi4+0x294>
 8000ad2:	d017      	beq.n	8000b04 <__udivmoddi4+0x290>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x27a>
 8000ad6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ada:	eb67 0701 	sbc.w	r7, r7, r1
 8000ade:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ae2:	40f2      	lsrs	r2, r6
 8000ae4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ae8:	40f7      	lsrs	r7, r6
 8000aea:	e9c5 2700 	strd	r2, r7, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e70b      	b.n	8000914 <__udivmoddi4+0xa0>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e9      	b.n	80008d4 <__udivmoddi4+0x60>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6fd      	b.n	8000900 <__udivmoddi4+0x8c>
 8000b04:	4543      	cmp	r3, r8
 8000b06:	d2e5      	bcs.n	8000ad4 <__udivmoddi4+0x260>
 8000b08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7df      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b14:	4608      	mov	r0, r1
 8000b16:	e7d2      	b.n	8000abe <__udivmoddi4+0x24a>
 8000b18:	4660      	mov	r0, ip
 8000b1a:	e78d      	b.n	8000a38 <__udivmoddi4+0x1c4>
 8000b1c:	4681      	mov	r9, r0
 8000b1e:	e7b9      	b.n	8000a94 <__udivmoddi4+0x220>
 8000b20:	4666      	mov	r6, ip
 8000b22:	e775      	b.n	8000a10 <__udivmoddi4+0x19c>
 8000b24:	4630      	mov	r0, r6
 8000b26:	e74a      	b.n	80009be <__udivmoddi4+0x14a>
 8000b28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b2c:	4439      	add	r1, r7
 8000b2e:	e713      	b.n	8000958 <__udivmoddi4+0xe4>
 8000b30:	3802      	subs	r0, #2
 8000b32:	443c      	add	r4, r7
 8000b34:	e724      	b.n	8000980 <__udivmoddi4+0x10c>
 8000b36:	bf00      	nop

08000b38 <__aeabi_idiv0>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <telecommand>:
 *      Author: guifre
 */

#include "comms.h"

void telecommand(void){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
//Hem de definir que volem fer aquí. //Enviar telecomands a la OBC??
	//todo pensar com tractarem cada cas/parlar amb payload/comms



}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <checkbatteries>:

static const uint8_t GYRO_ADDR = 0x68 << 1; //gyroscope address, 0x68 or 0x69 depending on the SA0 pin
static const uint8_t MAG_ADDR = 0x30 << 1; //magnetometer address


int checkbatteries(){
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
	BatteryLevels batterylevel;
	double actual_level, percentage;
//	actual_level = reading_EPS; //reading_EPS is still to be defined, will be acquireVoltage()?, acquirecurrent()?
//	percentage = (actual_level/MAX_BAT_LEVEL)*100;
//	batterylevel.fields.totalbattery = (int) percentage;
	return batterylevel.fields.totalbattery;
 8000b50:	783b      	ldrb	r3, [r7, #0]

}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <detumble>:

void detumble() {
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <deployment>:

void deployment(bool deployment_state, I2C_HandleTypeDef *hi2c){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
	while(system_state(&hi2c) && !deployment_state){
 8000b78:	bf00      	nop
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f87d 	bl	8000c7c <system_state>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <deployment+0x28>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f083 0301 	eor.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f2      	bne.n	8000b7a <deployment+0xe>
		/*Give high voltage to the resistor to burn the wire, TBD TIME AND VOLTAGE*/
	}
	deployment_state = true; /*Must be stored in FLASH memory in order to keep it if the system is rebooted*/
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <deploymentRF>:

void deploymentRF(){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <check_position>:
		}
	}
}


bool check_position() {
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
	//check the PQ position.
	//Region of contact with GS => comms_state = true
}
 8000bb2:	bf00      	nop
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <init>:

/* Function that simulates the "INIT" state
 * Wait for a while until we start acting on the pocketqube once it is deployed
 */
void init(bool detumble_state, bool deployment_state, bool deploymentRF_state, I2C_HandleTypeDef *hi2c){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	71bb      	strb	r3, [r7, #6]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	717b      	strb	r3, [r7, #5]
	if(!system_state(&hi2c)) currentState = CONTINGENCY;
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f850 	bl	8000c7c <system_state>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f083 0301 	eor.w	r3, r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <init+0x30>
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <init+0x78>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	701a      	strb	r2, [r3, #0]
		if(!deployment_state)	deployment(deployment_state, &hi2c);
		//Just in the PocketQube with the RF antenna
		if(!deploymentRF_state) deploymentRF();
		currentState = IDLE;
	}
}
 8000bee:	e01e      	b.n	8000c2e <init+0x6e>
		if(!detumble_state) detumble();
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f083 0301 	eor.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <init+0x40>
 8000bfc:	f7ff ffaf 	bl	8000b5e <detumble>
		if(!deployment_state)	deployment(deployment_state, &hi2c);
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <init+0x58>
 8000c0c:	463a      	mov	r2, r7
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffaa 	bl	8000b6c <deployment>
		if(!deploymentRF_state) deploymentRF();
 8000c18:	797b      	ldrb	r3, [r7, #5]
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <init+0x68>
 8000c24:	f7ff ffbc 	bl	8000ba0 <deploymentRF>
		currentState = IDLE;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <init+0x78>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000003c 	.word	0x2000003c

08000c3c <initsensors>:

void initsensors(I2C_HandleTypeDef *hi2c) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
	//todo mirar com inicialitzar sensors (magneto, giros, sensors temp...)
	HAL_StatusTypeDef ret;
	//GYROSCOPE CONFIGURATION
	ret = HAL_I2C_Master_Transmit(hi2c, GYRO_ADDR, (uint8_t*)0x1A, 1, 1000); //write in the register 0x1A
 8000c44:	23d0      	movs	r3, #208	; 0xd0
 8000c46:	b299      	uxth	r1, r3
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	221a      	movs	r2, #26
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f002 f99e 	bl	8002f94 <HAL_I2C_Master_Transmit>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {

	} else {
//		HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, /*data to register 0x1A*/, 1, 1000);
	}
	ret = HAL_I2C_Master_Transmit(hi2c, GYRO_ADDR, (uint8_t*)0x1B, 1, 1000); //write in the register 0x1B
 8000c5c:	23d0      	movs	r3, #208	; 0xd0
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	221b      	movs	r2, #27
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f002 f992 	bl	8002f94 <HAL_I2C_Master_Transmit>
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
	//MAGNETOMETER CONFIGURATION mirar a quin registre s'ha d'escriure
//	ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADDR, /**/, 1, HAL_MAX_DELAY);
	//wait for ACK?


}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <system_state>:

bool system_state(I2C_HandleTypeDef *hi2c){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if(checkbatteries() < NOMINAL) return false;
 8000c84:	f7ff ff61 	bl	8000b4a <checkbatteries>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b59      	cmp	r3, #89	; 0x59
 8000c8c:	dc01      	bgt.n	8000c92 <system_state+0x16>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e00c      	b.n	8000cac <system_state+0x30>

	//checkbatteries();
	if (!checktemperature(&hi2c)) return false;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f80d 	bl	8000cb4 <checktemperature>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <system_state+0x2e>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <system_state+0x30>
	//EPS_state(); ???
	//illumination_state(); ???
	return true;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <checktemperature>:

bool checktemperature(I2C_HandleTypeDef *hi2c){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	Temperatures temp;
//	acquireTemp(&hi2c, &temp);
	Flash_Read_Data(0x08008014, temp.raw, sizeof(temp));
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	483a      	ldr	r0, [pc, #232]	; (8000db0 <checktemperature+0xfc>)
 8000cc6:	f000 f95d 	bl	8000f84 <Flash_Read_Data>
	int i, cont = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
	for (i=1; i<=7; i++){  //number of sensors not defined yet
 8000cce:	2301      	movs	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	dc66      	bgt.n	8000da6 <checktemperature+0xf2>
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b06      	cmp	r3, #6
 8000cde:	d84e      	bhi.n	8000d7e <checktemperature+0xca>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <checktemperature+0x34>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000d05 	.word	0x08000d05
 8000cec:	08000d1f 	.word	0x08000d1f
 8000cf0:	08000d2f 	.word	0x08000d2f
 8000cf4:	08000d3f 	.word	0x08000d3f
 8000cf8:	08000d4f 	.word	0x08000d4f
 8000cfc:	08000d5f 	.word	0x08000d5f
 8000d00:	08000d6f 	.word	0x08000d6f

		switch(i) {

		case 1:
			if (temp.fields.tempbatt <= TEMP_MIN) heater(1);
 8000d04:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000d08:	f113 0f27 	cmn.w	r3, #39	; 0x27
 8000d0c:	da03      	bge.n	8000d16 <checktemperature+0x62>
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 f850 	bl	8000db4 <heater>
			else heater(0);
		break;
 8000d14:	e040      	b.n	8000d98 <checktemperature+0xe4>
			else heater(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f84c 	bl	8000db4 <heater>
		break;
 8000d1c:	e03c      	b.n	8000d98 <checktemperature+0xe4>

		case 2:
			if (temp.fields.temp1 > TEMP_MAX) cont ++;
 8000d1e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000d22:	2b69      	cmp	r3, #105	; 0x69
 8000d24:	dd2d      	ble.n	8000d82 <checktemperature+0xce>
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
		break;
 8000d2c:	e029      	b.n	8000d82 <checktemperature+0xce>

		case 3:
			if (temp.fields.temp2 > TEMP_MAX) cont ++;
 8000d2e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000d32:	2b69      	cmp	r3, #105	; 0x69
 8000d34:	dd27      	ble.n	8000d86 <checktemperature+0xd2>
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
		break;
 8000d3c:	e023      	b.n	8000d86 <checktemperature+0xd2>

		case 4:
			if (temp.fields.temp3 > TEMP_MAX) cont ++;
 8000d3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d42:	2b69      	cmp	r3, #105	; 0x69
 8000d44:	dd21      	ble.n	8000d8a <checktemperature+0xd6>
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
		break;
 8000d4c:	e01d      	b.n	8000d8a <checktemperature+0xd6>

		case 5:
			if (temp.fields.temp4 > TEMP_MAX) cont ++;
 8000d4e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000d52:	2b69      	cmp	r3, #105	; 0x69
 8000d54:	dd1b      	ble.n	8000d8e <checktemperature+0xda>
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
		break;
 8000d5c:	e017      	b.n	8000d8e <checktemperature+0xda>

		case 6:
			if (temp.fields.temp5 > TEMP_MAX) cont ++;
 8000d5e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d62:	2b69      	cmp	r3, #105	; 0x69
 8000d64:	dd15      	ble.n	8000d92 <checktemperature+0xde>
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
		break;
 8000d6c:	e011      	b.n	8000d92 <checktemperature+0xde>

		case 7:
			if (temp.fields.temp6 > TEMP_MAX) cont ++;
 8000d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d72:	2b69      	cmp	r3, #105	; 0x69
 8000d74:	dd0f      	ble.n	8000d96 <checktemperature+0xe2>
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
		break;
 8000d7c:	e00b      	b.n	8000d96 <checktemperature+0xe2>

		default: break;
 8000d7e:	bf00      	nop
 8000d80:	e00a      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d82:	bf00      	nop
 8000d84:	e008      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d86:	bf00      	nop
 8000d88:	e006      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d8a:	bf00      	nop
 8000d8c:	e004      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d8e:	bf00      	nop
 8000d90:	e002      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d92:	bf00      	nop
 8000d94:	e000      	b.n	8000d98 <checktemperature+0xe4>
		break;
 8000d96:	bf00      	nop
		//more cases should come as much as the final number of sensors
		}

	if (cont > 3) return false;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	dd01      	ble.n	8000da2 <checktemperature+0xee>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e001      	b.n	8000da6 <checktemperature+0xf2>
	else return true;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e7ff      	b.n	8000da6 <checktemperature+0xf2>
	}
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08008014 	.word	0x08008014

08000db4 <heater>:

void heater(int state){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <checkmemory>:

bool checkmemory(){
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

}
 8000dcc:	bf00      	nop
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a2e      	ldr	r2, [pc, #184]	; (8000ea0 <GetSector+0xc8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d806      	bhi.n	8000dfa <GetSector+0x22>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000df2:	d302      	bcc.n	8000dfa <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e04b      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <GetSector+0xcc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d806      	bhi.n	8000e10 <GetSector+0x38>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <GetSector+0xd0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d302      	bcc.n	8000e10 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e040      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <GetSector+0xd4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d806      	bhi.n	8000e26 <GetSector+0x4e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <GetSector+0xd8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d302      	bcc.n	8000e26 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e035      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <GetSector+0xdc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d206      	bcs.n	8000e3c <GetSector+0x64>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <GetSector+0xe0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d302      	bcc.n	8000e3c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e02a      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <GetSector+0xe4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d206      	bcs.n	8000e52 <GetSector+0x7a>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <GetSector+0xdc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d902      	bls.n	8000e52 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e01f      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <GetSector+0xe8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d206      	bcs.n	8000e68 <GetSector+0x90>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <GetSector+0xe4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d902      	bls.n	8000e68 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000e62:	2305      	movs	r3, #5
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e014      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <GetSector+0xec>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d206      	bcs.n	8000e7e <GetSector+0xa6>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <GetSector+0xe8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d902      	bls.n	8000e7e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e009      	b.n	8000e92 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <GetSector+0xf0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d205      	bcs.n	8000e92 <GetSector+0xba>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <GetSector+0xec>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	08003ffe 	.word	0x08003ffe
 8000ea4:	08007ffe 	.word	0x08007ffe
 8000ea8:	08004000 	.word	0x08004000
 8000eac:	0800bffe 	.word	0x0800bffe
 8000eb0:	08008000 	.word	0x08008000
 8000eb4:	0800ffff 	.word	0x0800ffff
 8000eb8:	0800c000 	.word	0x0800c000
 8000ebc:	0801ffff 	.word	0x0801ffff
 8000ec0:	0803ffff 	.word	0x0803ffff
 8000ec4:	0805ffff 	.word	0x0805ffff
 8000ec8:	0807ffff 	.word	0x0807ffff

08000ecc <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000ede:	f001 fa8f 	bl	8002400 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff ff78 	bl	8000dd8 <GetSector>
 8000ee8:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000ef6:	69f8      	ldr	r0, [r7, #28]
 8000ef8:	f7ff ff6e 	bl	8000dd8 <GetSector>
 8000efc:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <Flash_Write_Data+0xb4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <Flash_Write_Data+0xb4>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <Flash_Write_Data+0xb4>)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <Flash_Write_Data+0xb4>)
 8000f1a:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4817      	ldr	r0, [pc, #92]	; (8000f80 <Flash_Write_Data+0xb4>)
 8000f24:	f001 fbea 	bl	80026fc <HAL_FLASHEx_Erase>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01d      	beq.n	8000f6a <Flash_Write_Data+0x9e>
	  {
		  return HAL_FLASH_GetError ();
 8000f2e:	f001 fa99 	bl	8002464 <HAL_FLASH_GetError>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e020      	b.n	8000f78 <Flash_Write_Data+0xac>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f001 fa05 	bl	8002358 <HAL_FLASH_Program>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d106      	bne.n	8000f62 <Flash_Write_Data+0x96>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3304      	adds	r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	e003      	b.n	8000f6a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000f62:	f001 fa7f 	bl	8002464 <HAL_FLASH_GetError>
 8000f66:	4603      	mov	r3, r0
 8000f68:	e006      	b.n	8000f78 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbe1      	blt.n	8000f36 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000f72:	f001 fa67 	bl	8002444 <HAL_FLASH_Lock>

	   return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000028 	.word	0x20000028

08000f84 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	1e5a      	subs	r2, r3, #1
 8000faa:	80fa      	strh	r2, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000fb0:	e7ef      	b.n	8000f92 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000fb2:	bf00      	nop
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	currentState = IDLE;
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <main+0x138>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fdd6 	bl	8001b7c <HAL_Init>

  /* USER CODE BEGIN Init */

  /*Define the variables*/
  bool payload_state = true; //bool which indicates when do we need to go to PAYLOAD state
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	71fb      	strb	r3, [r7, #7]
  bool deploymentRF_state; //indicates if the deployment of the Payload antenna has been deployed
  bool detumble_state; //indicates if the detumbling process is completed
  bool comms_timer_state; //indicates if it is necessary to send telemetry

  //todo read different boolean states
    initsensors(&hi2c1);
 8000fd4:	4849      	ldr	r0, [pc, #292]	; (80010fc <main+0x13c>)
 8000fd6:	f7ff fe31 	bl	8000c3c <initsensors>
    init(detumble_state, deployment_state, deploymentRF_state, &hi2c1);
 8000fda:	78fa      	ldrb	r2, [r7, #3]
 8000fdc:	7939      	ldrb	r1, [r7, #4]
 8000fde:	7978      	ldrb	r0, [r7, #5]
 8000fe0:	4b46      	ldr	r3, [pc, #280]	; (80010fc <main+0x13c>)
 8000fe2:	f7ff fded 	bl	8000bc0 <init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f88f 	bl	8001108 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Flash_Write_Data(0x08008000, payload_state, sizeof(payload_state));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4843      	ldr	r0, [pc, #268]	; (8001100 <main+0x140>)
 8000ff2:	f7ff ff6b 	bl	8000ecc <Flash_Write_Data>
  bool prova;
  Flash_Read_Data(0x08008000, &prova, sizeof(prova));
 8000ff6:	1c7b      	adds	r3, r7, #1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4840      	ldr	r0, [pc, #256]	; (8001100 <main+0x140>)
 8000ffe:	f7ff ffc1 	bl	8000f84 <Flash_Read_Data>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f000 f9eb 	bl	80013dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001006:	f000 f8e7 	bl	80011d8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800100a:	f000 f937 	bl	800127c <MX_I2C1_Init>
  MX_SPI1_Init();
 800100e:	f000 f963 	bl	80012d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001012:	f000 f997 	bl	8001344 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001016:	f000 f9bf 	bl	8001398 <MX_USB_OTG_FS_HCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    system_state(&hi2c1);
 800101a:	4838      	ldr	r0, [pc, #224]	; (80010fc <main+0x13c>)
 800101c:	f7ff fe2e 	bl	8000c7c <system_state>
	    switch (currentState)
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <main+0x138>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d864      	bhi.n	80010f2 <main+0x132>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <main+0x70>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	08001089 	.word	0x08001089
 8001038:	080010bd 	.word	0x080010bd
 800103c:	080010eb 	.word	0x080010eb
	    {

	    case IDLE:
	        /* if a telecomand to use the payload/comms is received, go to PAYLOADS/COMMS state */
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 8001040:	482e      	ldr	r0, [pc, #184]	; (80010fc <main+0x13c>)
 8001042:	f7ff fe1b 	bl	8000c7c <system_state>
 8001046:	4603      	mov	r3, r0
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <main+0x98>
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <main+0x138>)
 8001054:	2203      	movs	r2, #3
 8001056:	701a      	strb	r2, [r3, #0]
	    	check_position();
 8001058:	f7ff fda9 	bl	8000bae <check_position>
	    	if(payload_state && checkmemory())	currentState = PAYLOAD; /*payload becomes true if a telecommand to acquire data is received*/
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <main+0xb4>
 8001062:	f7ff feb1 	bl	8000dc8 <checkmemory>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <main+0xb4>
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <main+0x138>)
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e005      	b.n	8001080 <main+0xc0>
	        else if(comms_state)	currentState = COMMS;	/*comms becomes true when we have acquired the data and we need to send it*/
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <main+0xc0>
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <main+0x138>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
	    	sensorReadings(&hi2c1); /*Updates the values of temperatures, voltages and currents*/
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <main+0x13c>)
 8001082:	f000 fb55 	bl	8001730 <sensorReadings>
	    	/*ADCS tasks needed??*/
	    	//Add Rx mode here
	        break;
 8001086:	e035      	b.n	80010f4 <main+0x134>

	    /*Is needed to listen periodically with the receiver or timer from IDLE state? -> COMMS part*/
	    case COMMS:	// This might refer ONLY refer to TX!!!
	        /* check if the picture or spectrogram has to be sent and send it if needed */
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <main+0x13c>)
 800108a:	f7ff fdf7 	bl	8000c7c <system_state>
 800108e:	4603      	mov	r3, r0
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <main+0xe2>
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <main+0x138>)
 800109c:	2203      	movs	r2, #3
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e004      	b.n	80010ac <main+0xec>
	    	else if(comms_state) telecommand(); 	        /* function that receives orders from "COMMS" */
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <main+0xec>
 80010a8:	f7ff fd48 	bl	8000b3c <telecommand>
	    	//else if(comms_timer_state) sendtelemetry(); /* loop that sends the telemetry data to "COMMS" */
	    	comms_state = false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71bb      	strb	r3, [r7, #6]
	    	comms_timer_state = false;
 80010b0:	2300      	movs	r3, #0
 80010b2:	70bb      	strb	r3, [r7, #2]
	    	currentState = IDLE;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <main+0x138>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
	        break;
 80010ba:	e01b      	b.n	80010f4 <main+0x134>
	        //HAL_FLASH_Program(TypeProgram, Adress, Data); //todo: comprovar HAL

	    case PAYLOAD:
	    	if(!system_state(&hi2c1)) currentState = CONTINGENCY;
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <main+0x13c>)
 80010be:	f7ff fddd 	bl	8000c7c <system_state>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <main+0x114>
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <main+0x138>)
 80010d0:	2203      	movs	r2, #3
 80010d2:	701a      	strb	r2, [r3, #0]
	    	payloadinit();
 80010d4:	f000 f9bd 	bl	8001452 <payloadinit>
	    	takePhoto(&huart1);
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <main+0x144>)
 80010da:	f000 f9c1 	bl	8001460 <takePhoto>
	    	payload_state = false;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
	    	currentState = IDLE;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <main+0x138>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	        break;
 80010e8:	e004      	b.n	80010f4 <main+0x134>
	         *Out of CONTINGENCY State when batterylevel is NOMINAL
	         *todo CHECK IF WE CAN EXECUTE SOME TASKS OR NOT IN STANDBY MODE*/
	    	 //while(checkbatteries() /= NOMINAL){
	    	 //}
	    	 /*Return to Run Mode*/
	         currentState = IDLE;
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <main+0x138>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	         //Una opció és fer reset total del satelit quan surti de contingency
	        break;
 80010f0:	e000      	b.n	80010f4 <main+0x134>
	    /*If we reach this state something has gone wrong*/
	    default:
	    	/*REBOOT THE SYSTEM*/
	        break;
 80010f2:	bf00      	nop
	    system_state(&hi2c1);
 80010f4:	e791      	b.n	800101a <main+0x5a>
 80010f6:	bf00      	nop
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	20000040 	.word	0x20000040
 8001100:	08008000 	.word	0x08008000
 8001104:	200000dc 	.word	0x200000dc

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 f824 	bl	8005164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SystemClock_Config+0xc8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <SystemClock_Config+0xc8>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <SystemClock_Config+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <SystemClock_Config+0xcc>)
 8001152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001178:	2310      	movs	r3, #16
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800117c:	23c0      	movs	r3, #192	; 0xc0
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001184:	2304      	movs	r3, #4
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fd53 	bl	8003c38 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001198:	f000 f956 	bl	8001448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 ffb6 	bl	8004128 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011c2:	f000 f941 	bl	8001448 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	; 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_ADC1_Init+0x98>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	; (8001274 <MX_ADC1_Init+0x9c>)
 80011ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_ADC1_Init+0x98>)
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_ADC1_Init+0xa0>)
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_ADC1_Init+0x98>)
 8001224:	2201      	movs	r2, #1
 8001226:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC1_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_ADC1_Init+0x98>)
 8001238:	f000 fd36 	bl	8001ca8 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 f901 	bl	8001448 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_ADC1_Init+0x98>)
 8001258:	f000 fd6a 	bl	8001d30 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001262:	f000 f8f1 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000094 	.word	0x20000094
 8001274:	40012000 	.word	0x40012000
 8001278:	0f000001 	.word	0x0f000001

0800127c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_I2C1_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_I2C1_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ba:	f001 fd27 	bl	8002d0c <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 f8c0 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000040 	.word	0x20000040
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0

080012d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI1_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_SPI1_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI1_Init+0x64>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI1_Init+0x64>)
 800132a:	f003 f8cd 	bl	80044c8 <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001334:	f000 f888 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000120 	.word	0x20000120
 8001340:	40013000 	.word	0x40013000

08001344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART1_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART1_UART_Init+0x4c>)
 800137c:	f003 f92d 	bl	80045da <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f85f 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000dc 	.word	0x200000dc
 8001394:	40011000 	.word	0x40011000

08001398 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800139e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013a2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80013c4:	f001 fc40 	bl	8002c48 <HAL_HCD_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80013ce:	f000 f83b 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000178 	.word	0x20000178

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_GPIO_Init+0x68>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <MX_GPIO_Init+0x68>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_GPIO_Init+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_GPIO_Init+0x68>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <MX_GPIO_Init+0x68>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_GPIO_Init+0x68>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_GPIO_Init+0x68>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <MX_GPIO_Init+0x68>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_GPIO_Init+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>

08001452 <payloadinit>:

#include "payload.h"
#include "definitions.h"
//#include "main.c"

void payloadinit(){
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
	system_state();
 8001456:	f7ff fc11 	bl	8000c7c <system_state>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <takePhoto>:
void receive(UART_HandleTypeDef *huart){
	payloadinit();
	takePhoto(&huart); 	/*Store it in memory from definitions.Image.bufferImage*/
}

bool takePhoto(UART_HandleTypeDef *huart){
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	3b0c      	subs	r3, #12
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	466b      	mov	r3, sp
 8001474:	461d      	mov	r5, r3
	Image image; /*Declaration of an Union Image type*/
	uint8_t capture[5] = {0x56, 0x00, 0x36, 0x01, 0x00};
 8001476:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800147a:	3b3c      	subs	r3, #60	; 0x3c
 800147c:	4a42      	ldr	r2, [pc, #264]	; (8001588 <takePhoto+0x128>)
 800147e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001482:	6018      	str	r0, [r3, #0]
 8001484:	3304      	adds	r3, #4
 8001486:	7019      	strb	r1, [r3, #0]
	uint8_t supposedAckCapture[5] = {0x76, 0x00, 0x36, 0x00, 0x00};
 8001488:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800148c:	3b44      	subs	r3, #68	; 0x44
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <takePhoto+0x12c>)
 8001490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001494:	6018      	str	r0, [r3, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	7019      	strb	r1, [r3, #0]
	uint8_t ackCapture[5];
	uint8_t readImageDataLength[5] = {0x56, 0x00, 0x34, 0x01, 0x00};
 800149a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800149e:	3b54      	subs	r3, #84	; 0x54
 80014a0:	4a3b      	ldr	r2, [pc, #236]	; (8001590 <takePhoto+0x130>)
 80014a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a6:	6018      	str	r0, [r3, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	7019      	strb	r1, [r3, #0]
	/*supposed ack of readImageDataLength = 76 00 34 00 04 00 00 XX YY 	where XX YY -> image length
	 * XX -> high byte, YY -> low byte*/
	uint8_t ackReadImageDataLength[8];
	uint16_t dataLength; /*FALTA PASSAR A DECIMAL*/
	uint8_t readImageData[16] = {0x56, 0x00, 0x32, 0x0C, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
 80014ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014b0:	3b6c      	subs	r3, #108	; 0x6c
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <takePhoto+0x134>)
 80014b4:	461c      	mov	r4, r3
 80014b6:	4613      	mov	r3, r2
 80014b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                            0x00, 0x00, 0x00, 0x00, 0x00, 0x0A};
	uint8_t imageData[14 + dataLength +14];
 80014be:	f507 439d 	add.w	r3, r7, #20096	; 0x4e80
 80014c2:	f103 0306 	add.w	r3, r3, #6
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	f103 041c 	add.w	r4, r3, #28
 80014cc:	1e63      	subs	r3, r4, #1
 80014ce:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 80014d2:	f102 0208 	add.w	r2, r2, #8
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4623      	mov	r3, r4
 80014da:	4618      	mov	r0, r3
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	00cb      	lsls	r3, r1, #3
 80014ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014ee:	00c2      	lsls	r2, r0, #3
 80014f0:	4623      	mov	r3, r4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f04f 0100 	mov.w	r1, #0
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	00cb      	lsls	r3, r1, #3
 8001502:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001506:	00c2      	lsls	r2, r0, #3
 8001508:	4623      	mov	r3, r4
 800150a:	3307      	adds	r3, #7
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	ebad 0d03 	sub.w	sp, sp, r3
 8001514:	466b      	mov	r3, sp
 8001516:	3300      	adds	r3, #0
 8001518:	f507 429d 	add.w	r2, r7, #20096	; 0x4e80
 800151c:	f102 020c 	add.w	r2, r2, #12
 8001520:	6013      	str	r3, [r2, #0]
	uint8_t stopCapture[5] = {0x56, 0x00, 0x36, 0x01, 0x03};
 8001522:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001526:	3b74      	subs	r3, #116	; 0x74
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <takePhoto+0x138>)
 800152a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152e:	6018      	str	r0, [r3, #0]
 8001530:	3304      	adds	r3, #4
 8001532:	7019      	strb	r1, [r3, #0]
	uint8_t supposedAckStopCapture[5] = {0x76, 0x00, 0x36, 0x00, 0x00};
 8001534:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001538:	3b7c      	subs	r3, #124	; 0x7c
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <takePhoto+0x12c>)
 800153c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001540:	6018      	str	r0, [r3, #0]
 8001542:	3304      	adds	r3, #4
 8001544:	7019      	strb	r1, [r3, #0]
	uint8_t ackStopCapture[5];

//	HAL_UART_Transmit(&huart1, capture, 5, 1000); 		/*Transmit capture command*/
//	HAL_UART_Receive(&huart1, ackCapture, 5, 1000);		/*Receive ack capture*/
	HAL_UART_Transmit(huart, capture, 5, 1000); 		/*Transmit capture command*/
 8001546:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800154a:	393c      	subs	r1, #60	; 0x3c
 800154c:	f107 0010 	add.w	r0, r7, #16
 8001550:	380c      	subs	r0, #12
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	2205      	movs	r2, #5
 8001558:	6800      	ldr	r0, [r0, #0]
 800155a:	f003 f88b 	bl	8004674 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, ackCapture, 5, 1000);		/*Receive ack capture*/
 800155e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001562:	394c      	subs	r1, #76	; 0x4c
 8001564:	f107 0010 	add.w	r0, r7, #16
 8001568:	380c      	subs	r0, #12
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	2205      	movs	r2, #5
 8001570:	6800      	ldr	r0, [r0, #0]
 8001572:	f003 f911 	bl	8004798 <HAL_UART_Receive>
 8001576:	46ad      	mov	sp, r5
//	HAL_FLASHEx_Erase(pEraseInit, SectorError); /*ACABAR DE MIRAR COM FUNCIONA*/
//	HAL_FLASH_Program_IT(TypeProgram, Address, Data);


	}
}
 8001578:	bf00      	nop
 800157a:	4618      	mov	r0, r3
 800157c:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	0800518c 	.word	0x0800518c
 800158c:	08005194 	.word	0x08005194
 8001590:	0800519c 	.word	0x0800519c
 8001594:	080051a4 	.word	0x080051a4
 8001598:	080051b4 	.word	0x080051b4

0800159c <acquireTemp>:
 */

#include "sensorReadings.h"
//#include "main.c"

void acquireTemp(I2C_HandleTypeDef *hi2c){
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	6078      	str	r0, [r7, #4]
	Temperatures temperatures_local;
	int i;
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val;
	uint8_t REG_TEMP = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	float temp_c; //defineixo float però no sé si es pot guardar al tipus Temperatures.raw
	uint8_t ADDR[7] = {/*Adreça 1, Adreça 2, etc*/};//adreces deks diferents sensors de temperatura
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2100      	movs	r1, #0
 80015b4:	460a      	mov	r2, r1
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	460a      	mov	r2, r1
 80015ba:	709a      	strb	r2, [r3, #2]
	for(i=1; i<=8; i++){
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	e091      	b.n	80016e6 <acquireTemp+0x14a>
		// Tell TMP102 that we want to read from the temperature register
		buf[0] = REG_TEMP;
 80015c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80015c6:	743b      	strb	r3, [r7, #16]
		ret = HAL_I2C_Master_Transmit(&hi2c, ADDR[i], buf, 1, 1000);
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b299      	uxth	r1, r3
 80015d4:	f107 0210 	add.w	r2, r7, #16
 80015d8:	1d38      	adds	r0, r7, #4
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f001 fcd7 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		if ( ret != HAL_OK ) {
 80015ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d175      	bne.n	80016e0 <acquireTemp+0x144>
			//strcpy((char*)buf, "Error Tx\r\n");
		} else {
			  // Read 2 bytes from the temperature register
			  ret = HAL_I2C_Master_Receive(&hi2c, ADDR[i], buf, 2, 1000);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b299      	uxth	r1, r3
 8001600:	f107 0210 	add.w	r2, r7, #16
 8001604:	1d38      	adds	r0, r7, #4
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2302      	movs	r3, #2
 800160e:	f001 fdbf 	bl	8003190 <HAL_I2C_Master_Receive>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			  if ( ret != HAL_OK ) {
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d15f      	bne.n	80016e0 <acquireTemp+0x144>
				  //strcpy((char*)buf, "Error Rx\r\n");
			  } else {
				  //Combine the bytes
				  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8001620:	7c3b      	ldrb	r3, [r7, #16]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	b21a      	sxth	r2, r3
 8001626:	7c7b      	ldrb	r3, [r7, #17]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	b2db      	uxtb	r3, r3
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	857b      	strh	r3, [r7, #42]	; 0x2a

				  // Convert to 2's complement, since temperature can be negative
				  if ( val > 0x7FF ) {
 8001632:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800163a:	db05      	blt.n	8001648 <acquireTemp+0xac>
					  val |= 0xF000;
 800163c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800163e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001642:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001646:	857b      	strh	r3, [r7, #42]	; 0x2a
				  }
				  // Convert to float temperature value (Celsius)
				  temp_c = val * 0.0625;
 8001648:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f83f 	bl	80006d0 <__aeabi_i2d>
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <acquireTemp+0x168>)
 8001658:	f7fe fdbe 	bl	80001d8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff f89e 	bl	80007a4 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	3b01      	subs	r3, #1
 8001670:	2b03      	cmp	r3, #3
 8001672:	d834      	bhi.n	80016de <acquireTemp+0x142>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <acquireTemp+0xe0>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800168d 	.word	0x0800168d
 8001680:	080016a1 	.word	0x080016a1
 8001684:	080016b5 	.word	0x080016b5
 8001688:	080016c9 	.word	0x080016c9
				  switch(i) {
				  case 1:
					  temperatures_local.fields.temp1 = temp_c;
 800168c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	edc7 7a00 	vstr	s15, [r7]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b25b      	sxtb	r3, r3
 800169c:	777b      	strb	r3, [r7, #29]
					  break;
 800169e:	e01f      	b.n	80016e0 <acquireTemp+0x144>
				  case 2:
					  temperatures_local.fields.temp2 = temp_c;
 80016a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a8:	edc7 7a00 	vstr	s15, [r7]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	77bb      	strb	r3, [r7, #30]
					  break;
 80016b2:	e015      	b.n	80016e0 <acquireTemp+0x144>
				  case 3:
					  temperatures_local.fields.temp3 = temp_c;
 80016b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	edc7 7a00 	vstr	s15, [r7]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	77fb      	strb	r3, [r7, #31]
					  break;
 80016c6:	e00b      	b.n	80016e0 <acquireTemp+0x144>
				  case 4:
					  temperatures_local.fields.temp4 = temp_c;
 80016c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	edc7 7a00 	vstr	s15, [r7]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f887 3020 	strb.w	r3, [r7, #32]
					  break;
 80016dc:	e000      	b.n	80016e0 <acquireTemp+0x144>
				  default:
					  break;
 80016de:	bf00      	nop
	for(i=1; i<=8; i++){
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	3301      	adds	r3, #1
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f77f af6a 	ble.w	80015c2 <acquireTemp+0x26>
				  }
			  }
		}
	}
	Flash_Write_Data(0x08008014, temperatures_local.raw, sizeof(temperatures_local));
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	2208      	movs	r2, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <acquireTemp+0x16c>)
 80016f8:	f7ff fbe8 	bl	8000ecc <Flash_Write_Data>
}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	3fb00000 	.word	0x3fb00000
 8001708:	08008014 	.word	0x08008014

0800170c <acquireVoltage>:

void acquireVoltage(){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
	Voltages voltages;

}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <acquireCurrents>:

void acquireCurrents(){
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
	Currents currents;
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <sensorReadings>:

void sensorReadings(I2C_HandleTypeDef *hi2c){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	acquireTemp(&hi2c);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff2e 	bl	800159c <acquireTemp>
	acquireVoltage();
 8001740:	f7ff ffe4 	bl	800170c <acquireVoltage>
	acquireCurrents();
 8001744:	f7ff ffeb 	bl	800171e <acquireCurrents>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_MspInit+0x4c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_MspInit+0x4c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_ADC_MspInit+0x7c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d127      	bne.n	8001812 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_ADC_MspInit+0x80>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017fa:	237f      	movs	r3, #127	; 0x7f
 80017fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_ADC_MspInit+0x84>)
 800180e:	f001 f897 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40012000 	.word	0x40012000
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_I2C_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001866:	23c0      	movs	r3, #192	; 0xc0
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	2312      	movs	r3, #18
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001876:	2304      	movs	r3, #4
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <HAL_I2C_MspInit+0x8c>)
 8001882:	f001 f85d 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 8001890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_I2C_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400

080018b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a28      	ldr	r2, [pc, #160]	; (8001978 <HAL_SPI_MspInit+0xc0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d149      	bne.n	800196e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_SPI_MspInit+0xc4>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_SPI_MspInit+0xc4>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_SPI_MspInit+0xc4>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_SPI_MspInit+0xc4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a1f      	ldr	r2, [pc, #124]	; (800197c <HAL_SPI_MspInit+0xc4>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_SPI_MspInit+0xc4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_SPI_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <HAL_SPI_MspInit+0xc4>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_SPI_MspInit+0xc4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <HAL_SPI_MspInit+0xc8>)
 800194a:	f000 fff9 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800194e:	2318      	movs	r3, #24
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195e:	2305      	movs	r3, #5
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <HAL_SPI_MspInit+0xcc>)
 800196a:	f000 ffe9 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013000 	.word	0x40013000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_MspInit+0x8c>)
 8001a00:	f000 ff9e 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a38:	d132      	bne.n	8001aa0 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a68:	230a      	movs	r3, #10
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_HCD_MspInit+0x94>)
 8001a74:	f000 ff64 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	6353      	str	r3, [r2, #52]	; 0x34
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a92:	6453      	str	r3, [r2, #68]	; 0x44
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_HCD_MspInit+0x90>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f890 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <SystemInit+0x20>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <SystemInit+0x20>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2e:	490e      	ldr	r1, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b30:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b44:	4c0b      	ldr	r4, [pc, #44]	; (8001b74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b52:	f7ff ffd7 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b56:	f003 fae1 	bl	800511c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7ff fa31 	bl	8000fc0 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b6c:	080051e4 	.word	0x080051e4
  ldr r2, =_sbss
 8001b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b74:	200004a0 	.word	0x200004a0

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 fba3 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fdce 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fbad 	bl	800233e <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 fb83 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	2000047c 	.word	0x2000047c

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000047c 	.word	0x2000047c

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e033      	b.n	8001d26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fd6a 	bl	80017a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f94a 	bl	8001f94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
 8001d16:	e001      	b.n	8001d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e113      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x244>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d925      	bls.n	8001da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68d9      	ldr	r1, [r3, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4403      	add	r3, r0
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e022      	b.n	8001dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4403      	add	r3, r0
 8001de4:	409a      	lsls	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d824      	bhi.n	8001e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	221f      	movs	r2, #31
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b05      	subs	r3, #5
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3e:	e04c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b23      	subs	r3, #35	; 0x23
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b23      	subs	r3, #35	; 0x23
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e90:	e023      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	; 0x41
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	; 0x41
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_ADC_ConfigChannel+0x250>)
 8001edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10f      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12b      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x1f4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d122      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_ADC_ConfigChannel+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x260>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	0c9a      	lsrs	r2, r3, #18
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40012300 	.word	0x40012300
 8001f84:	40012000 	.word	0x40012000
 8001f88:	10000012 	.word	0x10000012
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <ADC_Init+0x1f0>)
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <ADC_Init+0x1f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800203a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6899      	ldr	r1, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e00f      	b.n	8002092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0202 	bic.w	r2, r2, #2
 80020a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
 80020ac:	005a      	lsls	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	3b01      	subs	r3, #1
 80020ec:	035a      	lsls	r2, r3, #13
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e007      	b.n	8002108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002106:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	3b01      	subs	r3, #1
 8002124:	051a      	lsls	r2, r3, #20
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800213c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214a:	025a      	lsls	r2, r3, #9
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	029a      	lsls	r2, r3, #10
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40012300 	.word	0x40012300
 8002188:	0f000001 	.word	0x0f000001

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff47 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff5c 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffb0 	bl	80022ac <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_FLASH_Program+0xa0>)
 800236c:	7e1b      	ldrb	r3, [r3, #24]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_FLASH_Program+0x1e>
 8002372:	2302      	movs	r3, #2
 8002374:	e03b      	b.n	80023ee <HAL_FLASH_Program+0x96>
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_FLASH_Program+0xa0>)
 8002378:	2201      	movs	r2, #1
 800237a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800237c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002380:	f000 f87c 	bl	800247c <FLASH_WaitForLastOperation>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12b      	bne.n	80023e6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002394:	783b      	ldrb	r3, [r7, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	f000 f927 	bl	80025ec <FLASH_Program_Byte>
 800239e:	e016      	b.n	80023ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023a6:	883b      	ldrh	r3, [r7, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	68b8      	ldr	r0, [r7, #8]
 80023ac:	f000 f8fa 	bl	80025a4 <FLASH_Program_HalfWord>
 80023b0:	e00d      	b.n	80023ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d105      	bne.n	80023c4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f000 f8cf 	bl	8002560 <FLASH_Program_Word>
 80023c2:	e004      	b.n	80023ce <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f000 f897 	bl	80024fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023d2:	f000 f853 	bl	800247c <FLASH_WaitForLastOperation>
 80023d6:	4603      	mov	r3, r0
 80023d8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_FLASH_Program+0xa4>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_FLASH_Program+0xa4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_FLASH_Program+0xa0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	761a      	strb	r2, [r3, #24]
  
  return status;
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000480 	.word	0x20000480
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_FLASH_Unlock+0x38>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	da0b      	bge.n	800242a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_FLASH_Unlock+0x38>)
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_FLASH_Unlock+0x3c>)
 8002416:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_FLASH_Unlock+0x38>)
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_FLASH_Unlock+0x40>)
 800241c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_FLASH_Unlock+0x38>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da01      	bge.n	800242a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800242a:	79fb      	ldrb	r3, [r7, #7]
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40023c00 	.word	0x40023c00
 800243c:	45670123 	.word	0x45670123
 8002440:	cdef89ab 	.word	0xcdef89ab

08002444 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_FLASH_Lock+0x1c>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_FLASH_Lock+0x1c>)
 800244e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002452:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_FLASH_GetError+0x14>)
 800246a:	69db      	ldr	r3, [r3, #28]
}  
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000480 	.word	0x20000480

0800247c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <FLASH_WaitForLastOperation+0x78>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff fbdb 	bl	8001c48 <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002494:	e010      	b.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d00c      	beq.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <FLASH_WaitForLastOperation+0x38>
 80024a4:	f7ff fbd0 	bl	8001c48 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d201      	bcs.n	80024b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e019      	b.n	80024ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e8      	bne.n	8002496 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <FLASH_WaitForLastOperation+0x7c>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024e2:	f000 f8a5 	bl	8002630 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
  
}  
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000480 	.word	0x20000480
 80024f8:	40023c00 	.word	0x40023c00

080024fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 800250e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 800251a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800251e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <FLASH_Program_DoubleWord+0x60>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002532:	f3bf 8f6f 	isb	sy
}
 8002536:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	000a      	movs	r2, r1
 8002546:	2300      	movs	r3, #0
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	3104      	adds	r1, #4
 800254c:	4613      	mov	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40023c00 	.word	0x40023c00

08002560 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <FLASH_Program_Word+0x40>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <FLASH_Program_Word+0x40>)
 8002570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002574:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <FLASH_Program_Word+0x40>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <FLASH_Program_Word+0x40>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <FLASH_Program_Word+0x40>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <FLASH_Program_Word+0x40>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40023c00 	.word	0x40023c00

080025a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <FLASH_Program_HalfWord+0x44>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	801a      	strh	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <FLASH_Program_Byte+0x40>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <FLASH_Program_Byte+0x40>)
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <FLASH_Program_Byte+0x40>)
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <FLASH_Program_Byte+0x40>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <FLASH_Program_Byte+0x40>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <FLASH_Program_Byte+0x40>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00

08002630 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 800264a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 800264e:	2210      	movs	r2, #16
 8002650:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002652:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002668:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 800266c:	2220      	movs	r2, #32
 800266e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 8002686:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <FLASH_SetErrorCode+0xc8>)
 80026e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <FLASH_SetErrorCode+0xc4>)
 80026e6:	2202      	movs	r2, #2
 80026e8:	60da      	str	r2, [r3, #12]
  }
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	20000480 	.word	0x20000480

080026fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_FLASHEx_Erase+0x1e>
 8002716:	2302      	movs	r3, #2
 8002718:	e058      	b.n	80027cc <HAL_FLASHEx_Erase+0xd0>
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 800271c:	2201      	movs	r2, #1
 800271e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002720:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002724:	f7ff feaa 	bl	800247c <FLASH_WaitForLastOperation>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d148      	bne.n	80027c4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d115      	bne.n	800276e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 f844 	bl	80027dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002758:	f7ff fe90 	bl	800247c <FLASH_WaitForLastOperation>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_FLASHEx_Erase+0xdc>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <HAL_FLASHEx_Erase+0xdc>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6113      	str	r3, [r2, #16]
 800276c:	e028      	b.n	80027c0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	e01c      	b.n	80027b0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	68b8      	ldr	r0, [r7, #8]
 8002780:	f000 f850 	bl	8002824 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002784:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002788:	f7ff fe78 	bl	800247c <FLASH_WaitForLastOperation>
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_FLASHEx_Erase+0xdc>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_FLASHEx_Erase+0xdc>)
 8002796:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800279a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	601a      	str	r2, [r3, #0]
          break;
 80027a8:	e00a      	b.n	80027c0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4413      	add	r3, r2
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3da      	bcc.n	8002776 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80027c0:	f000 f878 	bl	80028b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_FLASHEx_Erase+0xd8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	761a      	strb	r2, [r3, #24]

  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000480 	.word	0x20000480
 80027d8:	40023c00 	.word	0x40023c00

080027dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <FLASH_MassErase+0x44>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <FLASH_MassErase+0x44>)
 80027ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <FLASH_MassErase+0x44>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <FLASH_MassErase+0x44>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <FLASH_MassErase+0x44>)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <FLASH_MassErase+0x44>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6113      	str	r3, [r2, #16]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e010      	b.n	8002862 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d103      	bne.n	800284e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e009      	b.n	8002862 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d103      	bne.n	800285c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e002      	b.n	8002862 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800285c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	490f      	ldr	r1, [pc, #60]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4313      	orrs	r3, r2
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <FLASH_Erase_Sector+0x8c>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	6113      	str	r3, [r2, #16]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <FLASH_FlushCaches+0x88>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <FLASH_FlushCaches+0x88>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	; (800293c <FLASH_FlushCaches+0x88>)
 80028ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <FLASH_FlushCaches+0x88>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <FLASH_FlushCaches+0x88>)
 80028d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <FLASH_FlushCaches+0x88>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <FLASH_FlushCaches+0x88>)
 80028e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <FLASH_FlushCaches+0x88>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a13      	ldr	r2, [pc, #76]	; (800293c <FLASH_FlushCaches+0x88>)
 80028ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <FLASH_FlushCaches+0x88>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <FLASH_FlushCaches+0x88>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <FLASH_FlushCaches+0x88>)
 8002906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800290a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <FLASH_FlushCaches+0x88>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <FLASH_FlushCaches+0x88>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <FLASH_FlushCaches+0x88>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <FLASH_FlushCaches+0x88>)
 800291e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002922:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <FLASH_FlushCaches+0x88>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <FLASH_FlushCaches+0x88>)
 800292a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292e:	6013      	str	r3, [r2, #0]
  }
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e159      	b.n	8002c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8148 	bne.w	8002c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a2 	beq.w	8002c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a56      	ldr	r2, [pc, #344]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_GPIO_Init+0x2f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x202>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <HAL_GPIO_Init+0x2f4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x1fe>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a47      	ldr	r2, [pc, #284]	; (8002c38 <HAL_GPIO_Init+0x2f8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <HAL_GPIO_Init+0x2fc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x1f6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x1f2>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e008      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b42:	2300      	movs	r3, #0
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	f67f aea2 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b08f      	sub	sp, #60	; 0x3c
 8002c4c:	af0a      	add	r7, sp, #40	; 0x28
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e054      	b.n	8002d04 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe fecf 	bl	8001a18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f892 	bl	8004dc2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	687e      	ldr	r6, [r7, #4]
 8002ca6:	466d      	mov	r5, sp
 8002ca8:	f106 0410 	add.w	r4, r6, #16
 8002cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cbc:	1d33      	adds	r3, r6, #4
 8002cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f002 f81d 	bl	8004d00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 f889 	bl	8004de4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	687e      	ldr	r6, [r7, #4]
 8002cda:	466d      	mov	r5, sp
 8002cdc:	f106 0410 	add.w	r4, r6, #16
 8002ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf0:	1d33      	adds	r3, r6, #4
 8002cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf4:	6838      	ldr	r0, [r7, #0]
 8002cf6:	f002 f91b 	bl	8004f30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e12b      	b.n	8002f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fd78 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d70:	f001 fb82 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a81      	ldr	r2, [pc, #516]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d807      	bhi.n	8002d90 <HAL_I2C_Init+0x84>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <HAL_I2C_Init+0x278>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e006      	b.n	8002d9e <HAL_I2C_Init+0x92>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a7d      	ldr	r2, [pc, #500]	; (8002f88 <HAL_I2C_Init+0x27c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0e7      	b.n	8002f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a78      	ldr	r2, [pc, #480]	; (8002f8c <HAL_I2C_Init+0x280>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d802      	bhi.n	8002de0 <HAL_I2C_Init+0xd4>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	e009      	b.n	8002df4 <HAL_I2C_Init+0xe8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <HAL_I2C_Init+0x284>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	3301      	adds	r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	495c      	ldr	r1, [pc, #368]	; (8002f80 <HAL_I2C_Init+0x274>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d819      	bhi.n	8002e48 <HAL_I2C_Init+0x13c>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e59      	subs	r1, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e28:	400b      	ands	r3, r1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_I2C_Init+0x138>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e59      	subs	r1, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	e051      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e04f      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d111      	bne.n	8002e74 <HAL_I2C_Init+0x168>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1e58      	subs	r0, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	440b      	add	r3, r1
 8002e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e012      	b.n	8002e9a <HAL_I2C_Init+0x18e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	0099      	lsls	r1, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Init+0x196>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e022      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_I2C_Init+0x1bc>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e58      	subs	r0, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	440b      	add	r3, r1
 8002eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec6:	e00f      	b.n	8002ee8 <HAL_I2C_Init+0x1dc>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	6809      	ldr	r1, [r1, #0]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6911      	ldr	r1, [r2, #16]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	000186a0 	.word	0x000186a0
 8002f84:	001e847f 	.word	0x001e847f
 8002f88:	003d08ff 	.word	0x003d08ff
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	10624dd3 	.word	0x10624dd3

08002f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	817b      	strh	r3, [r7, #10]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7fe fe4e 	bl	8001c48 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 80e0 	bne.w	800317c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2319      	movs	r3, #25
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4970      	ldr	r1, [pc, #448]	; (8003188 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fc58 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0d3      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x50>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0cc      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d007      	beq.n	800300a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	; 0x21
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2210      	movs	r2, #16
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a50      	ldr	r2, [pc, #320]	; (800318c <HAL_I2C_Master_Transmit+0x1f8>)
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fac2 	bl	80035dc <I2C_MasterRequestWrite>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e08d      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003078:	e066      	b.n	8003148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fcd2 	bl	8003a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06b      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d11b      	bne.n	800311c <HAL_I2C_Master_Transmit+0x188>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d017      	beq.n	800311c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	6a39      	ldr	r1, [r7, #32]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fcc2 	bl	8003aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b04      	cmp	r3, #4
 8003132:	d107      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01a      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d194      	bne.n	800307a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	00100002 	.word	0x00100002
 800318c:	ffff0000 	.word	0xffff0000

08003190 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
 80031a0:	4613      	mov	r3, r2
 80031a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7fe fd50 	bl	8001c48 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 820b 	bne.w	80035ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2319      	movs	r3, #25
 80031be:	2201      	movs	r2, #1
 80031c0:	497c      	ldr	r1, [pc, #496]	; (80033b4 <HAL_I2C_Master_Receive+0x224>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fb5a 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	e1fe      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x50>
 80031dc:	2302      	movs	r3, #2
 80031de:	e1f7      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d007      	beq.n	8003206 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003214:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2222      	movs	r2, #34	; 0x22
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_I2C_Master_Receive+0x228>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa46 	bl	80036e0 <I2C_MasterRequestRead>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1b8      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d113      	bne.n	800328e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	623b      	str	r3, [r7, #32]
 800327a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e18c      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	2b01      	cmp	r3, #1
 8003294:	d11b      	bne.n	80032ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e16c      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d11b      	bne.n	800330e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	e14c      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800331c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003334:	e138      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b03      	cmp	r3, #3
 800333c:	f200 80f1 	bhi.w	8003522 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b01      	cmp	r3, #1
 8003346:	d123      	bne.n	8003390 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fbed 	bl	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e139      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800338e:	e10b      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b02      	cmp	r3, #2
 8003396:	d14e      	bne.n	8003436 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2200      	movs	r2, #0
 80033a0:	4906      	ldr	r1, [pc, #24]	; (80033bc <HAL_I2C_Master_Receive+0x22c>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fa6a 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e10e      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
 80033b2:	bf00      	nop
 80033b4:	00100002 	.word	0x00100002
 80033b8:	ffff0000 	.word	0xffff0000
 80033bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003434:	e0b8      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2200      	movs	r2, #0
 800343e:	4966      	ldr	r1, [pc, #408]	; (80035d8 <HAL_I2C_Master_Receive+0x448>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fa1b 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0bf      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2200      	movs	r2, #0
 800349a:	494f      	ldr	r1, [pc, #316]	; (80035d8 <HAL_I2C_Master_Receive+0x448>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f9ed 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e091      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003520:	e042      	b.n	80035a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fb00 	bl	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e04c      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d118      	bne.n	80035a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f aec2 	bne.w	8003336 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010004 	.word	0x00010004

080035dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d006      	beq.n	8003606 <I2C_MasterRequestWrite+0x2a>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d003      	beq.n	8003606 <I2C_MasterRequestWrite+0x2a>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003604:	d108      	bne.n	8003618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00b      	b.n	8003630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b12      	cmp	r3, #18
 800361e:	d107      	bne.n	8003630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f91d 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d103      	bne.n	8003660 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e035      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800366c:	d108      	bne.n	8003680 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]
 800367e:	e01b      	b.n	80036b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	11db      	asrs	r3, r3, #7
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f063 030f 	orn	r3, r3, #15
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <I2C_MasterRequestWrite+0xfc>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f943 	bl	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e010      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <I2C_MasterRequestWrite+0x100>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f933 	bl	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	00010008 	.word	0x00010008
 80036dc:	00010002 	.word	0x00010002

080036e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003704:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d006      	beq.n	800371a <I2C_MasterRequestRead+0x3a>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d003      	beq.n	800371a <I2C_MasterRequestRead+0x3a>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003718:	d108      	bne.n	800372c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e00b      	b.n	8003744 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b11      	cmp	r3, #17
 8003732:	d107      	bne.n	8003744 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f893 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d103      	bne.n	8003774 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e079      	b.n	800386c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d108      	bne.n	8003794 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e05f      	b.n	8003854 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003794:	897b      	ldrh	r3, [r7, #10]
 8003796:	11db      	asrs	r3, r3, #7
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0306 	and.w	r3, r3, #6
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f063 030f 	orn	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4930      	ldr	r1, [pc, #192]	; (8003874 <I2C_MasterRequestRead+0x194>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f8b9 	bl	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e054      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4929      	ldr	r1, [pc, #164]	; (8003878 <I2C_MasterRequestRead+0x198>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8a9 	bl	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e044      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f831 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d103      	bne.n	8003838 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e017      	b.n	800386c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	11db      	asrs	r3, r3, #7
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0306 	and.w	r3, r3, #6
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f063 030e 	orn	r3, r3, #14
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4907      	ldr	r1, [pc, #28]	; (8003878 <I2C_MasterRequestRead+0x198>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f865 	bl	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	00010008 	.word	0x00010008
 8003878:	00010002 	.word	0x00010002

0800387c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	e025      	b.n	80038da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d021      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe f9d7 	bl	8001c48 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d116      	bne.n	80038da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e023      	b.n	8003922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10d      	bne.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	e00c      	b.n	800391a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf0c      	ite	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	2300      	movne	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d0b6      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003938:	e051      	b.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003948:	d123      	bne.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0204 	orr.w	r2, r3, #4
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e046      	b.n	8003a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d021      	beq.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe f955 	bl	8001c48 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e020      	b.n	8003a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10c      	bne.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e00b      	b.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d18d      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a34:	e02d      	b.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8ce 	bl	8003bd8 <I2C_IsAcknowledgeFailed>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e02d      	b.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d021      	beq.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe f8fb 	bl	8001c48 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e007      	b.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d1ca      	bne.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab6:	e02d      	b.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f88d 	bl	8003bd8 <I2C_IsAcknowledgeFailed>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e02d      	b.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d021      	beq.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7fe f8ba 	bl	8001c48 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d1ca      	bne.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b38:	e042      	b.n	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d119      	bne.n	8003b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0210 	mvn.w	r2, #16
 8003b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e029      	b.n	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe f864 	bl	8001c48 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d1b5      	bne.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d11b      	bne.n	8003c28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e264      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d075      	beq.n	8003d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c56:	4ba3      	ldr	r3, [pc, #652]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4ba0      	ldr	r3, [pc, #640]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x108>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d157      	bne.n	8003d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e23f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x74>
 8003c9e:	4b91      	ldr	r3, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a90      	ldr	r2, [pc, #576]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x98>
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a8a      	ldr	r2, [pc, #552]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xb0>
 8003cd0:	4b84      	ldr	r3, [pc, #528]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd ffaa 	bl	8001c48 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd ffa6 	bl	8001c48 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e204      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xc0>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd ff96 	bl	8001c48 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd ff92 	bl	8001c48 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1f0      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0xe8>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c4      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b56      	ldr	r3, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4952      	ldr	r1, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd ff4b 	bl	8001c48 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fd ff47 	bl	8001c48 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4940      	ldr	r1, [pc, #256]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCC_OscConfig+0x2b0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd ff2a 	bl	8001c48 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fd ff26 	bl	8001c48 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e184      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d030      	beq.n	8003e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fd ff0a 	bl	8001c48 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fd ff06 	bl	8001c48 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e164      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x200>
 8003e56:	e015      	b.n	8003e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x2b4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fef3 	bl	8001c48 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e66:	f7fd feef 	bl	8001c48 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14d      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a0 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_RCC_OscConfig+0x2b8>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fd feb5 	bl	8001c48 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e011      	b.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
 8003ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fd fea8 	bl	8001c48 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e106      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_OscConfig+0x4e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	e01c      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x312>
 8003f30:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	4b78      	ldr	r3, [pc, #480]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a77      	ldr	r2, [pc, #476]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0x32a>
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a71      	ldr	r2, [pc, #452]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fd fe6d 	bl	8001c48 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd fe69 	bl	8001c48 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0c5      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCC_OscConfig+0x33a>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fd fe57 	bl	8001c48 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd fe53 	bl	8001c48 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0af      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 809b 	beq.w	8004112 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d05c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d141      	bne.n	8004074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fe27 	bl	8001c48 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd fe23 	bl	8001c48 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e081      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	019b      	lsls	r3, r3, #6
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd fdfc 	bl	8001c48 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd fdf8 	bl	8001c48 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e056      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x41c>
 8004072:	e04e      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fd fde5 	bl	8001c48 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004082:	f7fd fde1 	bl	8001c48 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03f      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x44a>
 80040a0:	e037      	b.n	8004112 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e032      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d028      	beq.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d121      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d11a      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40007000 	.word	0x40007000
 8004120:	40023800 	.word	0x40023800
 8004124:	42470060 	.word	0x42470060

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0cc      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90c      	bls.n	8004164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0b8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	494d      	ldr	r1, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d044      	beq.n	8004248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d119      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e07f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e067      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4934      	ldr	r1, [pc, #208]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004218:	f7fd fd16 	bl	8001c48 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fd fd12 	bl	8001c48 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e04f      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d20c      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e032      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4916      	ldr	r1, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	490e      	ldr	r1, [pc, #56]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ae:	f000 f821 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	fa22 f303 	lsr.w	r3, r2, r3
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fc76 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080051bc 	.word	0x080051bc
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fa:	2100      	movs	r1, #0
 80042fc:	6079      	str	r1, [r7, #4]
 80042fe:	2100      	movs	r1, #0
 8004300:	60f9      	str	r1, [r7, #12]
 8004302:	2100      	movs	r1, #0
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004306:	2100      	movs	r1, #0
 8004308:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430a:	4952      	ldr	r1, [pc, #328]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800430c:	6889      	ldr	r1, [r1, #8]
 800430e:	f001 010c 	and.w	r1, r1, #12
 8004312:	2908      	cmp	r1, #8
 8004314:	d00d      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x3e>
 8004316:	2908      	cmp	r1, #8
 8004318:	f200 8094 	bhi.w	8004444 <HAL_RCC_GetSysClockFreq+0x150>
 800431c:	2900      	cmp	r1, #0
 800431e:	d002      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x32>
 8004320:	2904      	cmp	r1, #4
 8004322:	d003      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x38>
 8004324:	e08e      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004326:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_GetSysClockFreq+0x164>)
 8004328:	60bb      	str	r3, [r7, #8]
       break;
 800432a:	e08e      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432c:	4b4b      	ldr	r3, [pc, #300]	; (800445c <HAL_RCC_GetSysClockFreq+0x168>)
 800432e:	60bb      	str	r3, [r7, #8]
      break;
 8004330:	e08b      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004332:	4948      	ldr	r1, [pc, #288]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 8004334:	6849      	ldr	r1, [r1, #4]
 8004336:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800433a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433c:	4945      	ldr	r1, [pc, #276]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800433e:	6849      	ldr	r1, [r1, #4]
 8004340:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004344:	2900      	cmp	r1, #0
 8004346:	d024      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004348:	4942      	ldr	r1, [pc, #264]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800434a:	6849      	ldr	r1, [r1, #4]
 800434c:	0989      	lsrs	r1, r1, #6
 800434e:	4608      	mov	r0, r1
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004358:	f04f 0500 	mov.w	r5, #0
 800435c:	ea00 0204 	and.w	r2, r0, r4
 8004360:	ea01 0305 	and.w	r3, r1, r5
 8004364:	493d      	ldr	r1, [pc, #244]	; (800445c <HAL_RCC_GetSysClockFreq+0x168>)
 8004366:	fb01 f003 	mul.w	r0, r1, r3
 800436a:	2100      	movs	r1, #0
 800436c:	fb01 f102 	mul.w	r1, r1, r2
 8004370:	1844      	adds	r4, r0, r1
 8004372:	493a      	ldr	r1, [pc, #232]	; (800445c <HAL_RCC_GetSysClockFreq+0x168>)
 8004374:	fba2 0101 	umull	r0, r1, r2, r1
 8004378:	1863      	adds	r3, r4, r1
 800437a:	4619      	mov	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	f7fc fa5e 	bl	8000844 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e04a      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	461a      	mov	r2, r3
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	ea02 0400 	and.w	r4, r2, r0
 80043aa:	ea03 0501 	and.w	r5, r3, r1
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	014b      	lsls	r3, r1, #5
 80043bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043c0:	0142      	lsls	r2, r0, #5
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	1b00      	subs	r0, r0, r4
 80043c8:	eb61 0105 	sbc.w	r1, r1, r5
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	018b      	lsls	r3, r1, #6
 80043d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043da:	0182      	lsls	r2, r0, #6
 80043dc:	1a12      	subs	r2, r2, r0
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	00d9      	lsls	r1, r3, #3
 80043ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f0:	00d0      	lsls	r0, r2, #3
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	1912      	adds	r2, r2, r4
 80043f8:	eb45 0303 	adc.w	r3, r5, r3
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	0299      	lsls	r1, r3, #10
 8004406:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800440a:	0290      	lsls	r0, r2, #10
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f7fc fa12 	bl	8000844 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_GetSysClockFreq+0x160>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	60bb      	str	r3, [r7, #8]
      break;
 8004442:	e002      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <HAL_RCC_GetSysClockFreq+0x164>)
 8004446:	60bb      	str	r3, [r7, #8]
      break;
 8004448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444a:	68bb      	ldr	r3, [r7, #8]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bdb0      	pop	{r4, r5, r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	017d7840 	.word	0x017d7840

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	080051cc 	.word	0x080051cc

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffdc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0b5b      	lsrs	r3, r3, #13
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	080051cc 	.word	0x080051cc

080044c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07b      	b.n	80045d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d009      	beq.n	8004500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	e005      	b.n	8004500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f9cc 	bl	80018b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	ea42 0103 	orr.w	r1, r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0104 	and.w	r1, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0210 	and.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e03f      	b.n	800466c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fd f9c1 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9a6 	bl	8004970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004632:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004642:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004652:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	d17c      	bne.n	800478e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Transmit+0x2c>
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e075      	b.n	8004790 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Transmit+0x3e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e06e      	b.n	8004790 <HAL_UART_Transmit+0x11c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2221      	movs	r2, #33	; 0x21
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c8:	f7fd fabe 	bl	8001c48 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d108      	bne.n	80046f6 <HAL_UART_Transmit+0x82>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	e003      	b.n	80046fe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004706:	e02a      	b.n	800475e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8e2 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e036      	b.n	8004790 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004736:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3302      	adds	r3, #2
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e007      	b.n	8004750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1cf      	bne.n	8004708 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f8b2 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	f040 808c 	bne.w	80048d2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_Receive+0x2e>
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e084      	b.n	80048d4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Receive+0x40>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e07d      	b.n	80048d4 <HAL_UART_Receive+0x13c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2222      	movs	r2, #34	; 0x22
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f4:	f7fd fa28 	bl	8001c48 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d108      	bne.n	8004822 <HAL_UART_Receive+0x8a>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e003      	b.n	800482a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004832:	e043      	b.n	80048bc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	2120      	movs	r1, #32
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f84c 	bl	80048dc <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e042      	b.n	80048d4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	b29a      	uxth	r2, r3
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	3302      	adds	r3, #2
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e01f      	b.n	80048ae <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d007      	beq.n	8004888 <HAL_UART_Receive+0xf0>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_UART_Receive+0xfe>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	e008      	b.n	80048a8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1b6      	bne.n	8004834 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	e02c      	b.n	8004948 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d028      	beq.n	8004948 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x30>
 80048fc:	f7fd f9a4 	bl	8001c48 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	429a      	cmp	r2, r3
 800490a:	d21d      	bcs.n	8004948 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800491a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00f      	b.n	8004968 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	d0c3      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	b09f      	sub	sp, #124	; 0x7c
 8004976:	af00      	add	r7, sp, #0
 8004978:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	68d9      	ldr	r1, [r3, #12]
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	ea40 0301 	orr.w	r3, r0, r1
 8004990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049b4:	f021 010c 	bic.w	r1, r1, #12
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049be:	430b      	orrs	r3, r1
 80049c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ce:	6999      	ldr	r1, [r3, #24]
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	ea40 0301 	orr.w	r3, r0, r1
 80049d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4bc5      	ldr	r3, [pc, #788]	; (8004cf4 <UART_SetConfig+0x384>)
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d004      	beq.n	80049ee <UART_SetConfig+0x7e>
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4bc3      	ldr	r3, [pc, #780]	; (8004cf8 <UART_SetConfig+0x388>)
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d103      	bne.n	80049f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ee:	f7ff fd57 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 80049f2:	6778      	str	r0, [r7, #116]	; 0x74
 80049f4:	e002      	b.n	80049fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f6:	f7ff fd3f 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 80049fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	f040 80b6 	bne.w	8004b74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	f04f 0500 	mov.w	r5, #0
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	6439      	str	r1, [r7, #64]	; 0x40
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a20:	1912      	adds	r2, r2, r4
 8004a22:	eb45 0303 	adc.w	r3, r5, r3
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	00d9      	lsls	r1, r3, #3
 8004a30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a34:	00d0      	lsls	r0, r2, #3
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	1911      	adds	r1, r2, r4
 8004a3c:	6639      	str	r1, [r7, #96]	; 0x60
 8004a3e:	416b      	adcs	r3, r5
 8004a40:	667b      	str	r3, [r7, #100]	; 0x64
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a50:	415b      	adcs	r3, r3
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a5c:	f7fb fef2 	bl	8000844 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4ba5      	ldr	r3, [pc, #660]	; (8004cfc <UART_SetConfig+0x38c>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011e      	lsls	r6, r3, #4
 8004a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a70:	461c      	mov	r4, r3
 8004a72:	f04f 0500 	mov.w	r5, #0
 8004a76:	4622      	mov	r2, r4
 8004a78:	462b      	mov	r3, r5
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a86:	1912      	adds	r2, r2, r4
 8004a88:	eb45 0303 	adc.w	r3, r5, r3
 8004a8c:	f04f 0000 	mov.w	r0, #0
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	00d9      	lsls	r1, r3, #3
 8004a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a9a:	00d0      	lsls	r0, r2, #3
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	1911      	adds	r1, r2, r4
 8004aa2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aa4:	416b      	adcs	r3, r5
 8004aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	461a      	mov	r2, r3
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004abe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ac2:	f7fb febf 	bl	8000844 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b8c      	ldr	r3, [pc, #560]	; (8004cfc <UART_SetConfig+0x38c>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a87      	ldr	r2, [pc, #540]	; (8004cfc <UART_SetConfig+0x38c>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aec:	441e      	add	r6, r3
 8004aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af0:	4618      	mov	r0, r3
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	1894      	adds	r4, r2, r2
 8004afc:	623c      	str	r4, [r7, #32]
 8004afe:	415b      	adcs	r3, r3
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b06:	1812      	adds	r2, r2, r0
 8004b08:	eb41 0303 	adc.w	r3, r1, r3
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	f04f 0500 	mov.w	r5, #0
 8004b14:	00dd      	lsls	r5, r3, #3
 8004b16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b1a:	00d4      	lsls	r4, r2, #3
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	462b      	mov	r3, r5
 8004b20:	1814      	adds	r4, r2, r0
 8004b22:	653c      	str	r4, [r7, #80]	; 0x50
 8004b24:	414b      	adcs	r3, r1
 8004b26:	657b      	str	r3, [r7, #84]	; 0x54
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	1891      	adds	r1, r2, r2
 8004b34:	61b9      	str	r1, [r7, #24]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b42:	f7fb fe7f 	bl	8000844 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <UART_SetConfig+0x38c>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	; 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	4a67      	ldr	r2, [pc, #412]	; (8004cfc <UART_SetConfig+0x38c>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4432      	add	r2, r6
 8004b70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b72:	e0b9      	b.n	8004ce8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b76:	461c      	mov	r4, r3
 8004b78:	f04f 0500 	mov.w	r5, #0
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	6139      	str	r1, [r7, #16]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b8c:	1912      	adds	r2, r2, r4
 8004b8e:	eb45 0303 	adc.w	r3, r5, r3
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	00d9      	lsls	r1, r3, #3
 8004b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba0:	00d0      	lsls	r0, r2, #3
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	eb12 0804 	adds.w	r8, r2, r4
 8004baa:	eb43 0905 	adc.w	r9, r3, r5
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	008b      	lsls	r3, r1, #2
 8004bc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bc6:	0082      	lsls	r2, r0, #2
 8004bc8:	4640      	mov	r0, r8
 8004bca:	4649      	mov	r1, r9
 8004bcc:	f7fb fe3a 	bl	8000844 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4b49      	ldr	r3, [pc, #292]	; (8004cfc <UART_SetConfig+0x38c>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	011e      	lsls	r6, r3, #4
 8004bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be0:	4618      	mov	r0, r3
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	1894      	adds	r4, r2, r2
 8004bec:	60bc      	str	r4, [r7, #8]
 8004bee:	415b      	adcs	r3, r3
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf6:	1812      	adds	r2, r2, r0
 8004bf8:	eb41 0303 	adc.w	r3, r1, r3
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	f04f 0500 	mov.w	r5, #0
 8004c04:	00dd      	lsls	r5, r3, #3
 8004c06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c0a:	00d4      	lsls	r4, r2, #3
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	462b      	mov	r3, r5
 8004c10:	1814      	adds	r4, r2, r0
 8004c12:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c14:	414b      	adcs	r3, r1
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c30:	0082      	lsls	r2, r0, #2
 8004c32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c36:	f7fb fe05 	bl	8000844 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b2f      	ldr	r3, [pc, #188]	; (8004cfc <UART_SetConfig+0x38c>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	; 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <UART_SetConfig+0x38c>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5e:	441e      	add	r6, r3
 8004c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c62:	4618      	mov	r0, r3
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	1894      	adds	r4, r2, r2
 8004c6e:	603c      	str	r4, [r7, #0]
 8004c70:	415b      	adcs	r3, r3
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c78:	1812      	adds	r2, r2, r0
 8004c7a:	eb41 0303 	adc.w	r3, r1, r3
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	f04f 0500 	mov.w	r5, #0
 8004c86:	00dd      	lsls	r5, r3, #3
 8004c88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c8c:	00d4      	lsls	r4, r2, #3
 8004c8e:	4622      	mov	r2, r4
 8004c90:	462b      	mov	r3, r5
 8004c92:	eb12 0a00 	adds.w	sl, r2, r0
 8004c96:	eb43 0b01 	adc.w	fp, r3, r1
 8004c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	008b      	lsls	r3, r1, #2
 8004cae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cb2:	0082      	lsls	r2, r0, #2
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	f7fb fdc4 	bl	8000844 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <UART_SetConfig+0x38c>)
 8004cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2164      	movs	r1, #100	; 0x64
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	3332      	adds	r3, #50	; 0x32
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <UART_SetConfig+0x38c>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 020f 	and.w	r2, r3, #15
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4432      	add	r2, r6
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	377c      	adds	r7, #124	; 0x7c
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40011000 	.word	0x40011000
 8004cf8:	40011400 	.word	0x40011400
 8004cfc:	51eb851f 	.word	0x51eb851f

08004d00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d00:	b084      	sub	sp, #16
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	f107 001c 	add.w	r0, r7, #28
 8004d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d122      	bne.n	8004d5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8b8 	bl	8004ec8 <USB_CoreReset>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e01a      	b.n	8004d94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8ac 	bl	8004ec8 <USB_CoreReset>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
 8004d86:	e005      	b.n	8004d94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10b      	bne.n	8004db2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f043 0206 	orr.w	r2, r3, #6
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dbe:	b004      	add	sp, #16
 8004dc0:	4770      	bx	lr

08004dc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d106      	bne.n	8004e10 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	e00b      	b.n	8004e28 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	e001      	b.n	8004e28 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e003      	b.n	8004e30 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e28:	2032      	movs	r0, #50	; 0x32
 8004e2a:	f7fc ff19 	bl	8001c60 <HAL_Delay>

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	019b      	lsls	r3, r3, #6
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <USB_FlushTxFifo+0x48>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d0f0      	beq.n	8004e52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2210      	movs	r2, #16
 8004e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <USB_FlushRxFifo+0x40>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d0f0      	beq.n	8004e96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	00030d40 	.word	0x00030d40

08004ec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <USB_CoreReset+0x64>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e01b      	b.n	8004f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	daf2      	bge.n	8004ed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <USB_CoreReset+0x64>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e006      	b.n	8004f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d0f0      	beq.n	8004efe <USB_CoreReset+0x36>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	00030d40 	.word	0x00030d40

08004f30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f30:	b084      	sub	sp, #16
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	f107 001c 	add.w	r0, r7, #28
 8004f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d018      	beq.n	8004fb4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10a      	bne.n	8004f9e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e014      	b.n	8004fc8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e009      	b.n	8004fc8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004fc8:	2110      	movs	r1, #16
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff34 	bl	8004e38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff57 	bl	8004e84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e015      	b.n	8005008 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2300      	movs	r3, #0
 8005000:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	429a      	cmp	r2, r3
 800500e:	d3e5      	bcc.n	8004fdc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005010:	2101      	movs	r1, #1
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f848 	bl	80050a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005018:	20c8      	movs	r0, #200	; 0xc8
 800501a:	f7fc fe21 	bl	8001c60 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800503e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a14      	ldr	r2, [pc, #80]	; (8005094 <USB_HostInit+0x164>)
 8005044:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <USB_HostInit+0x168>)
 800504a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800504e:	e009      	b.n	8005064 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a10      	ldr	r2, [pc, #64]	; (800509c <USB_HostInit+0x16c>)
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <USB_HostInit+0x170>)
 8005060:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f043 0210 	orr.w	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <USB_HostInit+0x174>)
 800507c:	4313      	orrs	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800508e:	b004      	add	sp, #16
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	01000200 	.word	0x01000200
 8005098:	00e00300 	.word	0x00e00300
 800509c:	00600080 	.word	0x00600080
 80050a0:	004000e0 	.word	0x004000e0
 80050a4:	a3200008 	.word	0xa3200008

080050a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <USB_DriveVbus+0x44>
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d106      	bne.n	80050ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d109      	bne.n	800510c <USB_DriveVbus+0x64>
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800510a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4d0d      	ldr	r5, [pc, #52]	; (8005154 <__libc_init_array+0x38>)
 8005120:	4c0d      	ldr	r4, [pc, #52]	; (8005158 <__libc_init_array+0x3c>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	2600      	movs	r6, #0
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	4d0b      	ldr	r5, [pc, #44]	; (800515c <__libc_init_array+0x40>)
 800512e:	4c0c      	ldr	r4, [pc, #48]	; (8005160 <__libc_init_array+0x44>)
 8005130:	f000 f820 	bl	8005174 <_init>
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	2600      	movs	r6, #0
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	080051dc 	.word	0x080051dc
 8005158:	080051dc 	.word	0x080051dc
 800515c:	080051dc 	.word	0x080051dc
 8005160:	080051e0 	.word	0x080051e0

08005164 <memset>:
 8005164:	4402      	add	r2, r0
 8005166:	4603      	mov	r3, r0
 8005168:	4293      	cmp	r3, r2
 800516a:	d100      	bne.n	800516e <memset+0xa>
 800516c:	4770      	bx	lr
 800516e:	f803 1b01 	strb.w	r1, [r3], #1
 8005172:	e7f9      	b.n	8005168 <memset+0x4>

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
